[{"/Users/wangxinbo/Desktop/codeParse/react-project/src/index.js":"1","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/InputNumber.js":"2","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Triangle.js":"3","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Arrow.js":"4","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Tree.js":"5","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Dropdown.js":"6","/Users/wangxinbo/Desktop/codeParse/react-project/src/utils.js":"7","/Users/wangxinbo/Desktop/codeParse/react-project/src/App.js":"8","/Users/wangxinbo/Desktop/codeParse/react-project/src/ThreeOperation/ThreeOperation.js":"9","/Users/wangxinbo/Desktop/codeParse/react-project/src/404.js":"10","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Sidebar.js":"11","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/ComponentsTest.js":"12","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Arrow.js":"13","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Triangle.js":"14","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Dropdown.js":"15","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/InputNumber.js":"16","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Tree.js":"17","/Users/wangxinbo/Desktop/codeParse/react-project/src/Blog/SourceCode.js":"18","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/dvaTest.js":"19","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/DvaTest.js":"20","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/RichTextBoxTest.js":"21","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/JsCodeToSvgFlowchart.js":"22","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/Js2flowchart.js":"23","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/constants.js":"24","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeBuilder.js":"25","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/presentation-generator/PresentationGenerator.js":"26","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGRender.js":"27","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstractionLevelsConfigurator.js":"28","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/entryDefinitionsMap.js":"29","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astBuilder.js":"30","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeModifier.js":"31","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/svgObjectsBuilder.js":"32","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/modifiers/modifiersFactory.js":"33","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/StyleThemeFactory.js":"34","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astParserConfig.js":"35","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functionDependencies.js":"36","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/core.js":"37","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functions.js":"38","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/Harmony.js":"39","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesFactory.js":"40","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGBase.js":"41","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Blurred.js":"42","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/DefaultBaseTheme.js":"43","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Light.js":"44","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/BlackAndWhite.js":"45","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesDefinitionsMap.js":"46","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/connections/ConnectionArrow.js":"47","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ConditionRhombus.js":"48","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/RootCircle.js":"49","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rectangle.js":"50","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/LoopRhombus.js":"51","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/VerticalEdgedRectangle.js":"52","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ReturnStatement.js":"53","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DestructedNode.js":"54","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportDeclaration.js":"55","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ExportDeclaration.js":"56","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CatchClause.js":"57","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ThrowStatement.js":"58","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchStatement.js":"59","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/TryStatement.js":"60","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ContinueStatement.js":"61","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchCase.js":"62","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BreakStatement.js":"63","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportSpecifier.js":"64","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ObjectProperty.js":"65","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CallExpression.js":"66","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ClassDeclaration.js":"67","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DebuggerStatement.js":"68","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BaseShape.js":"69","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rhombus.js":"70","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/TextContentConfigurator.js":"71","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/logger.js":"72","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/treeLevelsPointer.js":"73","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/composition.js":"74","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversalWithTreeLevelsPointer.js":"75","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversal.js":"76","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/svgPrimitives.js":"77","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/geometry.js":"78","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/iteratorBuilder.js":"79","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/flatten.js":"80","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/string.js":"81"},{"size":1031,"mtime":1612360932407,"results":"82","hashOfConfig":"83"},{"size":2242,"mtime":1608978416216,"results":"84","hashOfConfig":"85"},{"size":1299,"mtime":1607934855187,"results":"86","hashOfConfig":"85"},{"size":787,"mtime":1607934868048,"results":"87","hashOfConfig":"85"},{"size":4735,"mtime":1608216994659,"results":"88","hashOfConfig":"85"},{"size":1146,"mtime":1607934863981,"results":"89","hashOfConfig":"85"},{"size":5349,"mtime":1612407367848,"results":"90","hashOfConfig":"83"},{"size":1638,"mtime":1609059029013,"results":"91","hashOfConfig":"83"},{"size":200,"mtime":1612360967594,"results":"92","hashOfConfig":"83"},{"size":230,"mtime":1608516461920,"results":"93","hashOfConfig":"83"},{"size":376,"mtime":1608977658554,"results":"94","hashOfConfig":"85"},{"size":2404,"mtime":1609312773140,"results":"95","hashOfConfig":"83"},{"size":787,"mtime":1609050669516,"results":"96","hashOfConfig":"83"},{"size":1299,"mtime":1607934855187,"results":"97","hashOfConfig":"83"},{"size":1146,"mtime":1609061878179,"results":"98","hashOfConfig":"83"},{"size":2910,"mtime":1609059039691,"results":"99","hashOfConfig":"83"},{"size":4741,"mtime":1611942322491,"results":"100","hashOfConfig":"83"},{"size":160,"mtime":1609063627134,"results":"101","hashOfConfig":"85"},{"size":909,"mtime":1609050827278,"results":"102","hashOfConfig":"85"},{"size":102,"mtime":1609059041355,"results":"103","hashOfConfig":"85"},{"size":6046,"mtime":1612099764894,"results":"104","hashOfConfig":"83"},{"size":1074,"mtime":1612700726526,"results":"105","hashOfConfig":"83"},{"size":1289,"mtime":1612701162961,"results":"106","hashOfConfig":"83"},{"size":2703,"mtime":1612188348961,"results":"107","hashOfConfig":"83"},{"size":3042,"mtime":1612701117279,"results":"108","hashOfConfig":"83"},{"size":2005,"mtime":1612701177389,"results":"109","hashOfConfig":"83"},{"size":4702,"mtime":1612702674439,"results":"110","hashOfConfig":"83"},{"size":1397,"mtime":1612701737628,"results":"111","hashOfConfig":"83"},{"size":10599,"mtime":1612701687318,"results":"112","hashOfConfig":"83"},{"size":3242,"mtime":1612701729660,"results":"113","hashOfConfig":"83"},{"size":1606,"mtime":1612702730122,"results":"114","hashOfConfig":"83"},{"size":5931,"mtime":1612702162796,"results":"115","hashOfConfig":"83"},{"size":2607,"mtime":1612701766473,"results":"116","hashOfConfig":"83"},{"size":1261,"mtime":1612702644310,"results":"117","hashOfConfig":"83"},{"size":270,"mtime":1612188348943,"results":"118","hashOfConfig":"83"},{"size":1361,"mtime":1612701267997,"results":"119","hashOfConfig":"83"},{"size":9079,"mtime":1612701747101,"results":"120","hashOfConfig":"83"},{"size":983,"mtime":1612701663237,"results":"121","hashOfConfig":"83"},{"size":1582,"mtime":1612701755022,"results":"122","hashOfConfig":"83"},{"size":2882,"mtime":1612702175984,"results":"123","hashOfConfig":"83"},{"size":1635,"mtime":1612702705445,"results":"124","hashOfConfig":"83"},{"size":717,"mtime":1612188348951,"results":"125","hashOfConfig":"83"},{"size":7110,"mtime":1612188348951,"results":"126","hashOfConfig":"83"},{"size":717,"mtime":1612188348952,"results":"127","hashOfConfig":"83"},{"size":306,"mtime":1612188348951,"results":"128","hashOfConfig":"83"},{"size":2967,"mtime":1612702186229,"results":"129","hashOfConfig":"83"},{"size":2669,"mtime":1612702446173,"results":"130","hashOfConfig":"83"},{"size":4250,"mtime":1612702554684,"results":"131","hashOfConfig":"83"},{"size":1497,"mtime":1612702612824,"results":"132","hashOfConfig":"83"},{"size":1433,"mtime":1612702598155,"results":"133","hashOfConfig":"83"},{"size":3262,"mtime":1612702591861,"results":"134","hashOfConfig":"83"},{"size":1843,"mtime":1612702622096,"results":"135","hashOfConfig":"83"},{"size":3014,"mtime":1612702604950,"results":"136","hashOfConfig":"83"},{"size":2376,"mtime":1612702581452,"results":"137","hashOfConfig":"83"},{"size":232,"mtime":1612188348955,"results":"138","hashOfConfig":"83"},{"size":211,"mtime":1612188348955,"results":"139","hashOfConfig":"83"},{"size":205,"mtime":1612188348953,"results":"140","hashOfConfig":"83"},{"size":190,"mtime":1612188348958,"results":"141","hashOfConfig":"83"},{"size":212,"mtime":1612188348958,"results":"142","hashOfConfig":"83"},{"size":188,"mtime":1612188348958,"results":"143","hashOfConfig":"83"},{"size":211,"mtime":1612188348954,"results":"144","hashOfConfig":"83"},{"size":186,"mtime":1612188348957,"results":"145","hashOfConfig":"83"},{"size":208,"mtime":1612188348953,"results":"146","hashOfConfig":"83"},{"size":191,"mtime":1612188348956,"results":"147","hashOfConfig":"83"},{"size":190,"mtime":1612188348956,"results":"148","hashOfConfig":"83"},{"size":190,"mtime":1612188348953,"results":"149","hashOfConfig":"83"},{"size":231,"mtime":1612188348954,"results":"150","hashOfConfig":"83"},{"size":193,"mtime":1612188348954,"results":"151","hashOfConfig":"83"},{"size":7343,"mtime":1612702850106,"results":"152","hashOfConfig":"83"},{"size":755,"mtime":1612188348957,"results":"153","hashOfConfig":"83"},{"size":376,"mtime":1612702648608,"results":"154","hashOfConfig":"83"},{"size":68,"mtime":1612188348962,"results":"155","hashOfConfig":"83"},{"size":295,"mtime":1612188348964,"results":"156","hashOfConfig":"83"},{"size":273,"mtime":1612188348961,"results":"157","hashOfConfig":"83"},{"size":726,"mtime":1612188348963,"results":"158","hashOfConfig":"83"},{"size":871,"mtime":1612188348963,"results":"159","hashOfConfig":"83"},{"size":4117,"mtime":1612188348963,"results":"160","hashOfConfig":"83"},{"size":856,"mtime":1612188348962,"results":"161","hashOfConfig":"83"},{"size":160,"mtime":1612188348962,"results":"162","hashOfConfig":"83"},{"size":363,"mtime":1612188348962,"results":"163","hashOfConfig":"83"},{"size":1830,"mtime":1612188348962,"results":"164","hashOfConfig":"83"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},"188gq72",{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wpv9tt",{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"167"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"167"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"167"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"167"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"167"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"167"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"167"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"167"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"167"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"167"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"167"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"167"},"/Users/wangxinbo/Desktop/codeParse/react-project/src/index.js",[],["342","343"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/InputNumber.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Triangle.js",[],["344","345"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Arrow.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Tree.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Dropdown.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/utils.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/App.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/ThreeOperation/ThreeOperation.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/404.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Sidebar.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/ComponentsTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Arrow.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Triangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Dropdown.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/InputNumber.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Tree.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Blog/SourceCode.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/dvaTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/DvaTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/RichTextBoxTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/JsCodeToSvgFlowchart.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/Js2flowchart.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/constants.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeBuilder.js",["346"],"import traverse from '@babel/traverse';\n\nimport { DefinitionsList } from './entryDefinitionsMap';\nimport { parseCodeToAST, buildVisitor } from './astBuilder';\nimport {\n    ABSTRACTION_LEVELS,\n    rebuildConfigForAbstractionLevel\n} from './abstractionLevelsConfigurator';\nimport FlowTreeModifier from './FlowTreeModifier';\nimport {\n    DEFINED_MODIFIERS,\n    MODIFIER_PRESETS,\n    destructionModifier,\n    expressionCallbacksModifier,\n    arrowFunctionReturnModifier\n} from './modifiers/modifiersFactory';\nimport { TOKEN_TYPES } from '../shared/constants';\nimport { logError } from '../shared/utils/logger';\n\nconst buildFlowTree = (astTree, astVisitorConfig) => {\n    const treeNodes = [];\n\n    traverse(astTree, buildVisitor(astVisitorConfig, treeNodes));\n\n    const root = (treeNodes.length && treeNodes[0]) || {};\n    return root.type === TOKEN_TYPES.PROGRAM\n        ? root\n        : { name: 'Root', type: TOKEN_TYPES.PROGRAM, body: treeNodes };\n};\n\n//TODO: seems redundant abstraction, refactor\nexport const createFlowTreeModifier = () => {\n    const modifiers = FlowTreeModifier();\n\n    return {\n        setModifier(modifier) {\n            modifiers.addModifier(modifier);\n        },\n\n        registerNewModifier(test, updates) {\n            modifiers.create(test, updates);\n        },\n\n        destructNodeTree(test, newNameFn) {\n            this.setModifier(destructionModifier(test, newNameFn));\n        },\n\n        applyToFlowTree(flowTree) {\n            modifiers.applyTo(flowTree);\n            return flowTree;\n        }\n    };\n};\n\nexport default ({ astParser = {}, astVisitor = {} } = {}) => {\n    const astParserConfig = {\n        ...astParser\n    };\n\n    const astVisitorConfig = {\n        definitionsMap: [...DefinitionsList],\n        globalIgnore: null,\n        ...astVisitor\n    };\n\n    const defaultModifier = createFlowTreeModifier();\n    defaultModifier.setModifier(expressionCallbacksModifier());\n    defaultModifier.setModifier(arrowFunctionReturnModifier());\n\n    return {\n        setAbstractionLevel(level) {\n            astVisitorConfig.definitionsMap = rebuildConfigForAbstractionLevel(level);\n        },\n\n        resetAbstractionLevelToNormal() {\n            astVisitorConfig.definitionsMap = [...DefinitionsList];\n        },\n\n        setIgnoreFilter(fn) {\n            astVisitorConfig.globalIgnore = fn;\n        },\n\n        build(code) {\n            const ast = this.buildAst(code);\n            return this.buildFlowTreeFromAst(ast);\n        },\n\n        buildAst(code) {\n            return parseCodeToAST(code, astParserConfig);\n        },\n\n        buildFlowTreeFromAst(ast) {\n            let flowTree = [];\n\n            try {\n                flowTree = buildFlowTree(ast, astVisitorConfig);\n                defaultModifier.applyToFlowTree(flowTree);\n            } catch (e) {\n                logError('Error at buildFlowTreeFromAst' + e.message, e.stack);\n                throw e;\n            }\n\n            return flowTree;\n        }\n    };\n};\n\nexport { DEFINED_MODIFIERS, MODIFIER_PRESETS, ABSTRACTION_LEVELS };\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/presentation-generator/PresentationGenerator.js",["347","348","349","350","351"],"import { parseCodeToAST } from '../builder/astBuilder';\n\nimport FlowTreeBuilder, {\n    ABSTRACTION_LEVELS,\n    MODIFIER_PRESETS,\n    DEFINED_MODIFIERS\n} from '../builder/FlowTreeBuilder';\nimport SVGRender from '../render/svg/SVGRender';\nimport { TOKEN_TYPES, MODIFIED_TYPES } from '../shared/constants';\n\nconst buildTreeByAbstractionLevels = levels => {\n    const flowTreeBuilder = FlowTreeBuilder();\n    flowTreeBuilder.setAbstractionLevel(levels);\n\n    return astTree => flowTreeBuilder.buildFlowTreeFromAst(astTree);\n};\n\nexport const generateExportSlideTree = buildTreeByAbstractionLevels(ABSTRACTION_LEVELS.EXPORT);\n\nexport const generateImportExportSlideTree = buildTreeByAbstractionLevels([\n    ABSTRACTION_LEVELS.EXPORT,\n    ABSTRACTION_LEVELS.IMPORT\n]);\n\nexport const generateClassFunctionSlideTree = buildTreeByAbstractionLevels([\n    ABSTRACTION_LEVELS.EXPORT,\n    ABSTRACTION_LEVELS.IMPORT,\n    ABSTRACTION_LEVELS.CLASS,\n    ABSTRACTION_LEVELS.FUNCTION\n]);\n\nexport const generateClassFunctionDependenciesSlideTree = buildTreeByAbstractionLevels([\n    ABSTRACTION_LEVELS.EXPORT,\n    ABSTRACTION_LEVELS.IMPORT,\n    ABSTRACTION_LEVELS.CLASS,\n    ABSTRACTION_LEVELS.FUNCTION,\n    ABSTRACTION_LEVELS.FUNCTION_DEPENDENCIES\n]);\n\nexport const generateRegularSlideTree = astTree => {\n    const flowTreeBuilder = FlowTreeBuilder();\n    return flowTreeBuilder.buildFlowTreeFromAst(astTree);\n};\n\nexport default code => ({\n    buildSlides: () => {\n        const svgRender = SVGRender(),\n            astTree = parseCodeToAST(code);\n\n        const slides = [\n            generateExportSlideTree(astTree),\n            generateImportExportSlideTree(astTree),\n            generateClassFunctionSlideTree(astTree),\n            generateClassFunctionDependenciesSlideTree(astTree),\n            generateRegularSlideTree(astTree)\n        ];\n\n        return slides\n            .filter(slide => slide.body.length)\n            .map(svgRender.buildShapesTree)\n            .map(shapesTree => shapesTree.print());\n    }\n});\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGRender.js",["352"],"import {\n    getDefaultTheme,\n    getBlurredTheme,\n    getBlackAndWhiteTheme,\n    getLightTheme,\n    applyStyleToTheme,\n    buildColorsBasedTheme\n} from './appearance/StyleThemeFactory';\nimport { buildSVGObjectsTree } from './svgObjectsBuilder';\nimport { traversal } from '../../shared/utils/traversal';\nimport { flatTree } from '../../shared/utils/flatten';\nimport { logError } from '../../shared/utils/logger';\n\nexport const ShapesTreeEditor = svgObjectsTree => {\n    const updateShapeTheme = (shape, shapeStyles, connectionArrowStyles) => {\n        if (shapeStyles) {\n            shape.updateTheme(shapeStyles);\n        }\n\n        if (connectionArrowStyles) {\n            shape.getAssignedConnectionArrow().updateTheme(connectionArrowStyles);\n            shape.getLoopedConnectionArrow &&\n                shape.getLoopedConnectionArrow().updateTheme(connectionArrowStyles);\n        }\n    };\n\n    return {\n        findShape(fnTest, startIndex = 0) {\n            return svgObjectsTree\n                .getShapes()\n                .filter((shape, index) => index >= startIndex && fnTest(shape));\n        },\n\n        applyShapeStyles(fn, shapeStyles, connectionArrowStyles) {\n            this.findShape(fn).forEach(shape => {\n                updateShapeTheme(shape, shapeStyles, connectionArrowStyles);\n            });\n        },\n\n        blur(fn) {\n            const blurredTheme = getBlurredTheme();\n\n            this.findShape(fn).forEach(shape => {\n                const connectionArrow = shape.getAssignedConnectionArrow();\n\n                updateShapeTheme(\n                    shape,\n                    blurredTheme[shape.getShapeType()],\n                    connectionArrow ? blurredTheme[connectionArrow.getFieldName()] : null\n                );\n            });\n        },\n\n        focus(fn) {\n            this.blur(shape => !fn(shape));\n        },\n\n        blurShapeBranch(fn) {\n            const blurredTheme = getBlurredTheme();\n\n            this.findShape(fn).forEach(shapeBranch =>\n                traversal(\n                    shapeBranch,\n                    shape => {\n                        const connectionArrow = shape.getAssignedConnectionArrow();\n\n                        updateShapeTheme(\n                            shape,\n                            blurredTheme[shape.getShapeType()],\n                            connectionArrow ? blurredTheme[connectionArrow.getFieldName()] : null\n                        );\n                    },\n                    shape => shape.state.body\n                )\n            );\n        },\n\n        focusShapeBranch(fns) {\n            const blurredTheme = getBlurredTheme();\n\n            [].concat(fns).forEach((fn, index) => {\n                this.findShape(fn).forEach(shapeBranch => {\n                    const flatShape = flatTree(shapeBranch, shape => shape.state.body);\n                    let branchIndex = svgObjectsTree.getShapes().indexOf(shapeBranch);\n\n                    this.findShape(\n                        shape => !flatShape.includes(shape),\n                        index > 0 ? branchIndex : 0\n                    ).forEach(shape => {\n                        const connectionArrow = shape.getAssignedConnectionArrow();\n\n                        updateShapeTheme(\n                            shape,\n                            blurredTheme[shape.getShapeType()],\n                            connectionArrow ? blurredTheme[connectionArrow.getFieldName()] : null\n                        );\n                    });\n                });\n            });\n        },\n\n        print(config) {\n            return svgObjectsTree && svgObjectsTree.print(config);\n        }\n    };\n};\n\nexport default (customStyleTheme = {}) => {\n    let theme = applyStyleToTheme(getDefaultTheme(), customStyleTheme);\n\n    return {\n        buildShapesTree(flowTree) {\n            let shapes = [];\n\n            try {\n                shapes = buildSVGObjectsTree(flowTree, theme);\n            } catch (e) {\n                logError('Error at buildShapesTree' + e.message, e.stack);\n                throw e;\n            }\n\n            return shapes;\n        },\n\n        applyTheme(newThemeStyles) {\n            theme = applyStyleToTheme(theme, newThemeStyles);\n        },\n\n        applyDefaultTheme() {\n            this.applyTheme(getDefaultTheme());\n        },\n        applyBlackAndWhiteTheme() {\n            this.applyTheme(getBlackAndWhiteTheme());\n        },\n        applyBlurredTheme() {\n            this.applyTheme(getBlurredTheme());\n        },\n        applyLightTheme() {\n            this.applyTheme(getLightTheme());\n        },\n\n        applyColorBasedTheme(colors) {\n            this.applyTheme(buildColorsBasedTheme(colors));\n        }\n    };\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstractionLevelsConfigurator.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/entryDefinitionsMap.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astBuilder.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeModifier.js",["353"],"import { traversalSearch } from '../shared/utils/traversal';\n\nconst executeApplyFn = (apply, node) => (typeof apply === 'function' ? apply(node) : apply);\n\nconst UpdatesMap = {\n    name(node, apply) {\n        node.name = executeApplyFn(apply, node);\n    },\n\n    prefixName(node, apply) {\n        node.prefixName = executeApplyFn(apply, node);\n    },\n\n    type(node, apply) {\n        node.type = executeApplyFn(apply, node);\n    },\n\n    body(node, apply) {\n        node.body = executeApplyFn(apply, node);\n    },\n\n    parent(node, apply) {\n        node.parent = executeApplyFn(apply, node);\n    }\n};\n\nconst applyModifierUpdates = (tree, modifier) => {\n    const nodes = traversalSearch(tree, modifier.test);\n\n    if (!nodes.length) return;\n\n    const updates = Object.keys(modifier.updates || {});\n\n    updates.filter(i => i !== 'subTreeUpdate').forEach(updateName => {\n        nodes.forEach(node => {\n            UpdatesMap[updateName](node, modifier.updates[updateName]);\n        });\n    });\n\n    if (updates.includes('subTreeUpdate')) {\n        modifier.updates.subTreeUpdate(nodes, tree);\n    }\n};\n\nexport default () => {\n    const modifiersList = [];\n\n    return {\n        addModifier(modifier) {\n            [].concat(modifier).forEach(item => modifiersList.push(item));\n        },\n\n        create(test, updates) {\n            this.addModifier({ test, updates });\n        },\n\n        runModifier(tree, modifier) {\n            applyModifierUpdates(tree, modifier);\n        },\n\n        applyTo(tree) {\n            modifiersList.forEach(modifier => this.runModifier(tree, modifier));\n        }\n    };\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/svgObjectsBuilder.js",["354"],"import { complexTraversal } from '../../shared/utils/traversalWithTreeLevelsPointer';\nimport { SVGBase } from './SVGBase';\nimport { createShapeForNode, createRootCircle, createConnectionArrow } from './shapesFactory';\nimport { TOKEN_TYPES, TOKEN_KEYS, ARROW_TYPE } from '../../shared/constants';\n\nexport const buildSVGObjectsTree = (flowTree, styleTheme) => {\n    const svg = SVGBase();\n\n    const shapeStructures = buildShapeStructures(flowTree, styleTheme);\n    const connections = buildConnections(shapeStructures.root, styleTheme);\n\n    svg.addShapes(shapeStructures.list).addShapes(shapeStructures.root);\n    svg.addArrowConnections(connections);\n\n    return svg;\n};\n\nexport const buildShapeStructures = (flowTree, styleTheme) => {\n    const root = createRootCircle(flowTree, styleTheme),\n        position = { ...root.getChildOffsetPoint() },\n        shapesList = [];\n\n    let latestNode;\n\n    complexTraversal(\n        flowTree,\n        root,\n        (parentNode, parentShape) => {\n            position.x += parentShape.getChildOffsetPoint().x;\n        },\n        (node, parentShape) => {\n            position.y += addExtraSpacingBeforeShape(styleTheme, node, latestNode);\n\n            //TODO: refactor, move cases out of func, it will to many of them soon\n            if (\n                parentShape.getNodeType() === TOKEN_TYPES.CONDITIONAL &&\n                node.key === TOKEN_KEYS.ALTERNATE &&\n                !parentShape.checkIfChildExist(TOKEN_KEYS.ALTERNATE)\n            ) {\n                const alternatePoint = parentShape.getAlternativeBranchChildOffsetPoint();\n                position.x = alternatePoint.x + parentShape.getMargin();\n                position.y = alternatePoint.y;\n            }\n\n            const shape = createShapeForNode(node, { x: position.x, y: position.y }, styleTheme);\n\n            position.x = shape.getPosition().x;\n            position.y = shape.getPosition().y;\n\n            shapesList.push(shape);\n            parentShape.connectChild(shape);\n            position.y += shape.getChildOffsetPoint().y;\n\n            latestNode = node;\n            return shape;\n        },\n        (parentNode, parentShape) => {\n            if (parentNode.type === TOKEN_TYPES.CONDITIONAL) {\n                position.y = parentShape.getChildBoundaries().max.y + parentShape.getMargin();\n            }\n\n            position.x = parentShape.getPosition().x;\n        }\n    );\n\n    return {\n        list: shapesList,\n        root: root\n    };\n};\n\nconst addExtraSpacingBeforeShape = (theme, node, latestNode = {}) => {\n    const complexNodeTypes = [\n        TOKEN_TYPES.FUNCTION,\n        TOKEN_TYPES.FUNCTION_DECLARATION,\n        TOKEN_TYPES.FUNCTION_EXPRESSION,\n        TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION,\n        TOKEN_TYPES.CLASS_DECLARATION,\n        TOKEN_TYPES.IMPORT_DECLARATION,\n        TOKEN_TYPES.EXPORT_NAMED_DECLARATION,\n        TOKEN_TYPES.EXPORT_DEFAULT_DECLARATION\n    ];\n\n    if (\n        complexNodeTypes.includes(node.type) &&\n        !complexNodeTypes.includes(latestNode.type) &&\n        node.pathParentType !== TOKEN_TYPES.CALL_EXPRESSION\n    ) {\n        return theme.BaseShape.complexTypeExtraSpace;\n    }\n\n    return 0;\n};\n\nexport const buildConnections = (shapesTree, styleTheme) => {\n    const connections = [],\n        pushArrow = config => {\n            const connection = createConnectionArrow(config, styleTheme);\n            connections.push(connection);\n\n            return connection;\n        };\n\n    let latestShape = null,\n        latestParentShape = null;\n\n    complexTraversal(\n        shapesTree,\n        shapesTree,\n        parentShape => {},\n        (shape, parentShape) => {\n            latestShape = shape;\n\n            const config = buildConnectionConfig(shape, parentShape),\n                arrow = pushArrow(config);\n\n            shape.assignConnectionArrow(arrow);\n\n            return shape;\n        },\n        parentShape => {\n            latestParentShape = parentShape;\n            if (parentShape.getNodeType() !== TOKEN_TYPES.LOOP) return;\n\n            const { max } = parentShape.getChildBoundaries();\n\n            parentShape.assignLoopedConnectionArrow(\n                pushArrow({\n                    startPoint: latestShape.getBackPoint(),\n                    endPoint: parentShape.getMidPoint(),\n                    boundaryPoint: { x: max.x },\n                    arrowType: ARROW_TYPE.DOWN\n                })\n            );\n        },\n        {\n            getBody: node => node.getBody()\n        }\n    );\n\n    return connections;\n};\n\nconst isNoArrow = (toShape, fromShape) => {\n    if (\n        [\n            TOKEN_TYPES.IMPORT_SPECIFIER,\n            TOKEN_TYPES.IMPORT_DEFAULT_SPECIFIER,\n            TOKEN_TYPES.OBJECT_PROPERTY\n        ].includes(toShape.getNodeType())\n    ) {\n        return true;\n    }\n\n    if (\n        [\n            TOKEN_TYPES.FUNCTION_DECLARATION,\n            TOKEN_TYPES.FUNCTION_EXPRESSION,\n            TOKEN_TYPES.FUNCTION,\n            TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION\n        ].includes(toShape.getNodeType()) &&\n        [\n            TOKEN_TYPES.CALL_EXPRESSION,\n            TOKEN_TYPES.VARIABLE_DECLARATOR,\n            TOKEN_TYPES.ASSIGNMENT_EXPRESSION,\n            TOKEN_TYPES.NEW_EXPRESSION\n        ].includes(fromShape.getNodeType())\n    ) {\n        return true;\n    }\n};\n\nconst buildConnectionConfig = (toShape, fromShape) => {\n    const config = {\n        endPoint: toShape.getToPoint(),\n        arrowType: ARROW_TYPE.RIGHT,\n        noArrow: isNoArrow(toShape, fromShape)\n    };\n\n    if (\n        toShape.getNodeKey() === TOKEN_KEYS.ALTERNATE &&\n        fromShape.getAlternativeBranchChildOffsetPoint\n    ) {\n        const boundaryPoint = fromShape.getAlternativeBranchChildOffsetPoint();\n\n        config.startPoint = fromShape.getAlternateFromPoint();\n        config.boundaryPoint = { x: boundaryPoint.x };\n    } else {\n        config.startPoint = fromShape.getFromPoint();\n    }\n\n    return config;\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/modifiers/modifiersFactory.js",["355"],"import { TOKEN_TYPES, TOKEN_KEYS, MODIFIED_TYPES } from '../../shared/constants';\n\nconst extractNodeName = (node, field) => {\n    const name = node.name.split(`.${field}(`)[0];\n\n    if (name.includes('=')) {\n        return name.split('=');\n    }\n\n    return [name];\n};\n\nconst testNode = (node, field) => node.name.includes(`.${field}(`);\n\nexport const DEFINED_MODIFIERS = {\n    forEach: {\n        test: node => testNode(node, 'forEach'),\n        updates: {\n            name: node => `each in  ${extractNodeName(node, 'forEach')[0]}`,\n            type: TOKEN_TYPES.LOOP,\n            body: node => [...node.body[0].body]\n        }\n    },\n\n    filter: {\n        test: node => testNode(node, 'filter'),\n        updates: {\n            name: node =>\n                `in ${extractNodeName(node, 'filter')[1]} to ${extractNodeName(node, 'filter')[0]}`,\n            prefixName: 'filter',\n            type: TOKEN_TYPES.LOOP\n        }\n    },\n\n    map: {\n        test: node => testNode(node, 'map'),\n        updates: {\n            name: node =>\n                `from ${extractNodeName(node, 'map')[1]} to ${extractNodeName(node, 'map')[0]}`,\n            prefixName: 'map',\n            type: TOKEN_TYPES.LOOP\n        }\n    }\n};\n\nexport const destructionModifier = (test, newNameFn) => ({\n    test,\n    updates: {\n        name: newNameFn,\n        body: [],\n        type: MODIFIED_TYPES.DESTRUCTED\n    }\n});\n\nexport const arrowFunctionReturnModifier = () => ({\n    test: node =>\n        node.isBodyEntry &&\n        node.parent &&\n        node.parent.subType === TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION,\n    updates: {\n        name: node => 'return ' + node.name,\n        type: TOKEN_TYPES.RETURN\n    }\n});\n\nexport const expressionCallbacksModifier = () => ({\n    test: node => node.pathParentType === TOKEN_TYPES.CALL_EXPRESSION,\n    updates: {\n        subTreeUpdate: nodes => {\n            nodes.forEach(node => {\n                const parentBody = node.parent.body,\n                    index = parentBody.indexOf(node) + 1;\n\n                for (let i = index; i < parentBody.length; i++) {\n                    let sibling = parentBody[i];\n\n                    if (sibling && sibling.type === TOKEN_TYPES.CALL_EXPRESSION) {\n                        node.parent.body = parentBody.filter(n => n !== node);\n                        sibling.body = [...(sibling.body || []), node];\n\n                        return;\n                    }\n                }\n            });\n        }\n    }\n});\n\nexport const MODIFIER_PRESETS = {\n    es5ArrayIterators: [DEFINED_MODIFIERS.forEach, DEFINED_MODIFIERS.filter, DEFINED_MODIFIERS.map]\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/StyleThemeFactory.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astParserConfig.js",["356"],"export default {\n    sourceType: 'module',\n    plugins: [\n        'objectRestSpread',\n        'jsx',\n        'typescript',\n        'classProperties',\n        'asyncGenerators',\n        'dynamicImport',\n        'exportDefaultFrom',\n        'exportNamespaceFrom'\n    ]\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functionDependencies.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/core.js",["357"],"import generate from '@babel/generator';\nimport { TOKEN_TYPES, CLASS_FUNCTION_KINDS } from '../../shared/constants';\n\nexport const idleConverter = path => {\n    return generate(path.node).code;\n};\n\nexport const identifierConverter = path => {\n    if (path.parent.type === TOKEN_TYPES.SPREAD_PROPERTY) {\n        return '...' + idleConverter(path);\n    }\n\n    return idleConverter(path);\n};\n\n/* function */\nexport const functionConverter = path => {\n    const node = path.node,\n        paramsCode = getFunctionParametersCode(node.params);\n\n    let name = '';\n\n    if (node.id) {\n        name = getAnonymousFunctionName(path) + 'function ' + node.id.name + paramsCode;\n    } else if (node.type === TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION) {\n        name = getAnonymousFunctionName(path) + paramsCode + ' =>';\n    } else if (node.type === TOKEN_TYPES.CLASS_METHOD || node.type === TOKEN_TYPES.OBJECT_METHOD) {\n        name =\n            node.kind === CLASS_FUNCTION_KINDS.CONSTRUCTOR\n                ? 'constructor' + paramsCode\n                : node.key.name + paramsCode;\n    } else {\n        name = getAnonymousFunctionName(path) + 'function' + paramsCode;\n    }\n\n    return { name, pathParentType: path.parent.type };\n};\n\nexport const getAnonymousFunctionName = path => {\n    const parent = path.parent;\n\n    if (\n        !parent ||\n        (parent.type !== TOKEN_TYPES.VARIABLE_DECLARATOR &&\n            parent.type !== TOKEN_TYPES.ASSIGNMENT_EXPRESSION &&\n            parent.type !== TOKEN_TYPES.OBJECT_PROPERTY)\n    ) {\n        return '';\n    }\n\n    if (parent.left) {\n        return generate(parent.left).code + ' = ';\n    }\n\n    const parentId = parent.id;\n    return parentId ? parentId.name + ' = ' : '';\n};\n\nexport const getFunctionParametersCode = params => {\n    return `(${params\n        .map(p => {\n            if (p.name) {\n                return p.name;\n            }\n\n            return generate(p).code;\n        })\n        .join(', ')})`;\n};\n\nexport const returnConverter = path => {\n    const node = path.node;\n    if (\n        node.argument &&\n        ([TOKEN_TYPES.CONDITIONAL_EXPRESSION, TOKEN_TYPES.OBJECT_EXPRESSION].includes(\n            node.argument.type\n        ) ||\n            isFunctionType(node.argument.type))\n    ) {\n        return 'return';\n    }\n\n    return path.node.argument ? `return ${generate(path.node.argument).code}` : 'return';\n};\n/* end function */\n\n/* loop */\nexport const loopConverter = ({ node }) => {\n    if (node.test) {\n        return generate(node.test).code;\n    }\n\n    if (node.left && node.right) {\n        const innerPart = node.type === TOKEN_TYPES.FOR_OF_STATEMENT ? 'of' : 'in';\n        const leftPart =\n            node.left.type === TOKEN_TYPES.VARIABLE_DECLARATION\n                ? getVariableDeclarations(node.left.declarations)\n                : generate(node.left).code;\n\n        return `${leftPart} ${innerPart} ${generate(node.right).code}`;\n    }\n};\n\nexport const continueConverter = path => {\n    return path.node.label ? `continue ${generate(path.node.label).code}` : 'continue';\n};\n/* end loop */\n\nexport const conditionalConverter = path => {\n    return `(${generate(path.node.test).code})`;\n};\n\n/* try-catch */\nexport const tryConverter = path => {\n    return `try`;\n};\n\nexport const catchConverter = path => {\n    return path.node.param ? `catch (${generate(path.node.param).code})` : '*catchConverter*';\n};\n\nexport const finallyConverter = path => {\n    //TODO: fix `finally`, not implemented yet because it presents only as a part of parent,\n    //there is no `finally` visitor as it exist for `catch`\n    //seems like to do that each try-catch block should be handled in a different way\n\n    return '*finallyConverter*';\n};\n/* end try-catch */\n\n/* switch-case */\nexport const switchStatementConverter = path => {\n    return `switch (${generate(path.node.discriminant).code})`;\n};\n\nexport const caseConverter = path => {\n    return path.node.test ? `case ${generate(path.node.test).code}:` : 'default:';\n};\n\nexport const breakConverter = path => {\n    return path.node.label ? `break ${generate(path.node.label).code}:` : 'break';\n};\n/* end switch - case */\n\nexport const withStatementConverter = path => {\n    return `with (${generate(path.node.object).code})`;\n};\n\nexport const programConverter = path => {\n    return `${path.node.type}: source ${path.node.sourceType}`;\n};\n\nexport const throwStatementConverter = path => {\n    return `throw ${generate(path.node.argument).code}`;\n};\n\nexport const debuggerConverter = path => {\n    return `debugger`;\n};\n\nexport const getVariableDeclarations = variables =>\n    variables.map(v => variableDeclaratorConverter({ node: v })).join(', ');\n\nexport const variableDeclaratorConverter = path => {\n    const node = path.node,\n        parentKind = (path.parent && path.parent.kind) || '';\n\n    if (\n        node.init &&\n        (isNodeContainsFunc(node.init) || node.init.type === TOKEN_TYPES.CONDITIONAL_EXPRESSION)\n    ) {\n        return `${parentKind} ${node.id.name} = `;\n    }\n\n    let variableName = '';\n    if (node.id.type === TOKEN_TYPES.OBJECT_PATTERN) {\n        variableName = '{...}';\n    } else if (node.id.type === TOKEN_TYPES.ARRAY_PATTERN) {\n        variableName = '[...]';\n    } else {\n        variableName = node.id.name;\n    }\n\n    if (\n        node.init &&\n        [TOKEN_TYPES.CALL_EXPRESSION, TOKEN_TYPES.NEW_EXPRESSION].includes(node.init.type)\n    ) {\n        return `${parentKind} ${variableName} = ` + callExpressionConverter({ node: node.init });\n    }\n\n    if (node.init && node.init.type === TOKEN_TYPES.OBJECT_EXPRESSION) {\n        return `${parentKind} ${variableName} = ${objectExpressionConverter()}`;\n    }\n\n    if (node.id && node.id.type === TOKEN_TYPES.OBJECT_PATTERN) {\n        return `${parentKind} {...} = ${node.init.name}`;\n    }\n\n    if (node.id && node.id.type === TOKEN_TYPES.ARRAY_PATTERN) {\n        return `${parentKind} [...] = ${node.init.name}`;\n    }\n\n    return parentKind + ' ' + generate(node).code;\n};\n\nexport const assignmentExpressionConverter = ({ node }) => {\n    if (isNodeContainsFunc(node.right) || node.right.type === TOKEN_TYPES.CONDITIONAL_EXPRESSION) {\n        return `${getLeftAssignmentName(node.left)} ${node.operator} `;\n    }\n\n    if (node.right.type === TOKEN_TYPES.OBJECT_EXPRESSION) {\n        return `${getLeftAssignmentName(node.left)} ${\n            node.operator\n        } ${objectExpressionConverter()}`;\n    }\n\n    if ([TOKEN_TYPES.CALL_EXPRESSION, TOKEN_TYPES.NEW_EXPRESSION].includes(node.right.type)) {\n        return `${getLeftAssignmentName(node.left)} ${node.operator} ${callExpressionConverter({\n            node: node.right\n        })}`;\n    }\n\n    return generate(node).code;\n};\n\nconst getLeftAssignmentName = node => {\n    if (node.name) {\n        return node.name;\n    }\n\n    return generate(node).code;\n};\n\nexport const callExpressionConverter = ({ node }) => {\n    let argumentsCode = '';\n\n    if (node.arguments && node.arguments.length) {\n        argumentsCode = node.arguments.map(getArgumentName).join(', ');\n    }\n\n    const callee = node.callee;\n    if (\n        callee.type === TOKEN_TYPES.MEMBER_EXPRESSION &&\n        callee.object.type === TOKEN_TYPES.CALL_EXPRESSION\n    ) {\n        return { name: `.${callee.property.name}(${argumentsCode})`, chain: true };\n    } else if (argumentsCode) {\n        return `${generate(node.callee).code}(${argumentsCode})`;\n    }\n\n    return generate(node).code;\n};\n\nconst getArgumentName = argument => {\n    if (isNodeContainsFunc(argument)) return '*()';\n    if (argument.type === TOKEN_TYPES.OBJECT_EXPRESSION) return objectExpressionConverter();\n\n    if (argument.name) return argument.name;\n    if (argument.value)\n        return argument.type === TOKEN_TYPES.STRING_LITERAL\n            ? `'${argument.value}'`\n            : argument.value;\n\n    return generate(argument).code;\n};\n\nexport const objectExpressionConverter = path => {\n    const name = '{*}';\n    if (path) return { name, pathParentType: path.parent.type };\n\n    return name;\n};\n\nexport const objectPropertyConverter = path => {\n    const node = path.node;\n\n    if (node.value && isFunctionType(node.value.type)) {\n        return node.key.name + ': ';\n    }\n\n    if (node.value && node.value.type === TOKEN_TYPES.OBJECT_EXPRESSION) {\n        return node.key.name + ': ' + objectExpressionConverter();\n    }\n\n    return generate(node).code;\n};\n\nconst getFirstCallee = callee => {\n    if (!callee) return callee;\n    if (\n        callee.type === TOKEN_TYPES.MEMBER_EXPRESSION &&\n        callee.object.type === TOKEN_TYPES.CALL_EXPRESSION\n    ) {\n        return getFirstCallee(callee.object);\n    }\n\n    return callee;\n};\n\nexport const isFunctionType = type => {\n    return [\n        TOKEN_TYPES.FUNCTION_EXPRESSION,\n        TOKEN_TYPES.FUNCTION,\n        TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION,\n        TOKEN_TYPES.FUNCTION_DECLARATION\n    ].includes(type);\n};\n\nexport const isNodeContainsFunc = node => {\n    const functions = [TOKEN_TYPES.ARROW_FUNCTION_EXPRESSION, TOKEN_TYPES.FUNCTION_EXPRESSION];\n\n    return node && functions.indexOf(node.type) !== -1;\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functions.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/Harmony.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesFactory.js",["358"],"import { ARROW_TYPE } from '../../shared/constants';\nimport { getShapeForNode } from './shapesDefinitionsMap';\nimport ConnectionArrow, {\n    getFieldName as getConnectionArrowFieldName\n} from './connections/ConnectionArrow';\n\nexport const createShapeForNode = (node, position, styleTheme) => {\n    const shape = getShapeForNode(node),\n        shapeStyle = styleTheme[shape.getThemeFieldName()];\n\n    return shape(node, position, shapeStyle);\n};\n\nexport const createRootCircle = (node, styleTheme) => {\n    const shape = getShapeForNode(node),\n        shapeStyle = styleTheme[shape.getThemeFieldName()];\n\n    const { center, childOffset } = { ...styleTheme.RootStartPoint };\n    const root = shape(node, center, shapeStyle);\n\n    root.setChildOffsetPoint(childOffset);\n\n    return root;\n};\n\nexport const createConnectionArrow = (config, styleTheme) => {\n    const connectionArrowStyle = styleTheme[getConnectionArrowFieldName()],\n        arrowConfig = getConnectionConfig(config, connectionArrowStyle);\n\n    return ConnectionArrow({ ...config, ...arrowConfig }, connectionArrowStyle);\n};\n\nexport const getConnectionConfig = ({ startPoint, endPoint, boundaryPoint, arrowType }, theme) => {\n    const config = {\n        linePoints: [],\n        arrowPoint: { x: endPoint.x, y: endPoint.y }\n    };\n\n    switch (arrowType) {\n        case ARROW_TYPE.RIGHT:\n            config.linePoints = [{ x: startPoint.x, y: startPoint.y }];\n\n            if (boundaryPoint) {\n                config.linePoints = config.linePoints.concat([\n                    { x: boundaryPoint.x, y: startPoint.y },\n                    { x: boundaryPoint.x, y: endPoint.y },\n                    { x: endPoint.x, y: endPoint.y }\n                ]);\n            } else {\n                config.linePoints = config.linePoints.concat([\n                    { x: startPoint.x, y: endPoint.y },\n                    { x: endPoint.x, y: endPoint.y }\n                ]);\n            }\n            break;\n\n        case ARROW_TYPE.LEFT:\n            config.linePoints = [\n                { x: startPoint.x, y: startPoint.y },\n                { x: boundaryPoint.x + theme.lineTurnOffset, y: startPoint.y },\n                { x: boundaryPoint.x + theme.lineTurnOffset, y: endPoint.y },\n                { x: endPoint.x - theme.lineTurnOffset, y: endPoint.y }\n            ];\n            break;\n\n        case ARROW_TYPE.DOWN:\n            config.linePoints = [\n                { x: startPoint.x, y: startPoint.y },\n                { x: boundaryPoint.x + theme.lineTurnOffset, y: startPoint.y },\n                {\n                    x: boundaryPoint.x + theme.lineTurnOffset,\n                    y: endPoint.y - theme.lineTurnOffset\n                },\n                { x: endPoint.x, y: endPoint.y - theme.lineTurnOffset },\n                { x: endPoint.x, y: endPoint.y }\n            ];\n            break;\n    }\n\n    return config;\n};\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGBase.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Blurred.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/DefaultBaseTheme.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Light.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/BlackAndWhite.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesDefinitionsMap.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/connections/ConnectionArrow.js",["359"],"import { assignState, mergeObjectStructures } from '../../../shared/utils/composition';\nimport { getCurvedPath, getClosedPath } from '../../../shared/utils/svgPrimitives';\nimport { addOffsetToPoints } from '../../../shared/utils/geometry';\n\nimport { ARROW_TYPE } from '../../../shared/constants';\n\nconst ENTITY_FIELD_NAME = 'ConnectionArrow';\n\nexport const getFieldName = () => {\n    return ENTITY_FIELD_NAME;\n};\n\nconst setupSelectors = state => ({\n    getFieldName\n});\n\nconst setupUpdateBehaviour = state => ({\n    updateTheme(newTheme) {\n        state.theme = mergeObjectStructures(state.theme, newTheme);\n    }\n});\n\nconst setupPrintBehaviour = state => ({\n    printLine(points) {\n        return getCurvedPath(points, state.theme.line);\n    },\n\n    printArrow(point, arrowPoints) {\n        return getClosedPath(addOffsetToPoints(arrowPoints, point), state.theme.arrow);\n    },\n\n    printArrowByType(type, { x, y }) {\n        const arrowSize = state.theme.arrow.size;\n        let point;\n\n        //TODO: move to svgPrimitives\n        switch (type) {\n            case ARROW_TYPE.RIGHT:\n                point = { x: x - arrowSize.x, y: y - arrowSize.y / 2 };\n\n                return this.printArrow(point, [\n                    { x: 0, y: 0 },\n                    { x: arrowSize.x, y: arrowSize.y / 2 },\n                    { x: 0, y: arrowSize.y }\n                ]);\n\n            case ARROW_TYPE.LEFT:\n                point = { x: x, y: y - arrowSize.y / 2 };\n\n                return this.printArrow(point, [\n                    { x: 0, y: arrowSize.y / 2 },\n                    { x: arrowSize.x, y: 0 },\n                    { x: arrowSize.x, y: arrowSize.y }\n                ]);\n\n            case ARROW_TYPE.DOWN:\n                point = { x: x - arrowSize.y / 2, y: y - arrowSize.x };\n\n                return this.printArrow(point, [\n                    { x: 0, y: 0 },\n                    { x: arrowSize.y / 2, y: arrowSize.x },\n                    { x: arrowSize.y, y: 0 }\n                ]);\n\n            default:\n                return '';\n        }\n    },\n\n    print() {\n        const { linePoints, arrowPoint, arrowType, noArrow } = state.config;\n\n        if (noArrow) {\n            linePoints[linePoints.length - 1].x += state.theme.arrow.size.x;\n        }\n\n        return `\n            <g>\n               ${this.printLine(linePoints)}\n               ${!noArrow && this.printArrowByType(arrowType, arrowPoint)}\n            </g>`;\n    }\n});\n\nexport const ConnectionArrow = state =>\n    assignState(state, [setupUpdateBehaviour, setupPrintBehaviour, setupSelectors]);\n\nexport default (config, theme) => ConnectionArrow({ config, theme, originalTheme: theme });\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ConditionRhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/RootCircle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rectangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/LoopRhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/VerticalEdgedRectangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ReturnStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DestructedNode.js",["360","361","362"],"import { getRoundedRectangle, getLine, getClosedPath } from '../../../shared/utils/svgPrimitives';\nimport { assignState } from '../../../shared/utils/composition';\nimport { addOffsetToPoints } from '../../../shared/utils/geometry';\n\nimport {\n    setupBasicBehaviour,\n    setupInitialProperties,\n    setupInitialSelectors,\n    calculateHeight,\n    calculateNameBasedWidth,\n    calculatePosition,\n    delegateInit\n} from './BaseShape';\n\nconst ENTITY_FIELD_NAME = 'DestructedNode';\n\nconst setupDestructedNodeBehaviour = state => ({\n    print(config) {\n        const theme = state.theme,\n            suffixTheme = theme.suffix;\n\n        const { x, y } = state.position,\n            h = state.dimensions.h,\n            w = state.dimensions.w - 2 * (suffixTheme.width + suffixTheme.space),\n            namePosition = { x, y };\n\n        const suffix1 = getRoundedRectangle(\n            x + w + suffixTheme.space,\n            y,\n            suffixTheme.width,\n            h,\n            suffixTheme\n        );\n        const suffix2 = getRoundedRectangle(\n            x + w + 2 * suffixTheme.space + suffixTheme.width,\n            y,\n            suffixTheme.width,\n            h,\n            suffixTheme\n        );\n\n        return `\n            <g>\n                ${getRoundedRectangle(x, y, w, h, theme)}\n                \n                ${suffix1}\n                ${suffix2}\n                             \n                ${this.printName(namePosition)}\n                ${this.printDebugInfo(config)}\n            </g>`;\n    }\n});\n\nconst calculateWidth = state => {\n    const theme = state.theme,\n        suffix = theme.suffix;\n\n    return (\n        2 * theme.horizontalPadding +\n        2 * (suffix.width + +suffix.space) +\n        calculateNameBasedWidth(state)\n    );\n};\n\nconst calculateDimensions = state => ({\n    w: calculateWidth(state),\n    h: calculateHeight(state)\n});\n\nconst extractBasicState = state => ({\n    ...state,\n    position: calculatePosition(state),\n    dimensions: calculateDimensions(state)\n});\n\nexport const DestructedNode = initialState => {\n    let state = extractBasicState(initialState);\n\n    state = { ...state, ...setupInitialProperties(state) };\n\n    return assignState(state, [\n        setupInitialSelectors,\n        setupBasicBehaviour,\n        setupDestructedNodeBehaviour\n    ]);\n};\n\nexport default delegateInit(DestructedNode, ENTITY_FIELD_NAME);\n","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ExportDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CatchClause.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ThrowStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/TryStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ContinueStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchCase.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BreakStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportSpecifier.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ObjectProperty.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CallExpression.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ClassDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DebuggerStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BaseShape.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/TextContentConfigurator.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/logger.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/treeLevelsPointer.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/composition.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversalWithTreeLevelsPointer.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversal.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/svgPrimitives.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/geometry.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/iteratorBuilder.js",[],["363","364"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/flatten.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/string.js",["365"],"import stringWidth from 'string-width';\n\nexport const generateId = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (Math.random() * 16) | 0,\n            v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\n\nexport const getPathId = node => {\n    const queue = [node];\n    let id = `node-id:|${node.name}|`;\n\n    while (queue.length) {\n        let item = queue.shift();\n\n        if (item) {\n            id += item.name ? item.name[0] : '-';\n\n            if (item.parent) {\n                queue.push(item.parent);\n            }\n        }\n    }\n\n    return id.replace(/\\s/g, '').toUpperCase();\n};\n\nexport const splitNameString = (str, maxLineLength, nameSplitterTokensIterator) => {\n    const strLength = str.length;\n\n    if (strLength <= maxLineLength) return [str];\n\n    return [str.slice(0, maxLineLength) + '...'];\n    //TODO: fix\n\n    let parts = [],\n        currentPositionIndex = 0,\n        splitter = nameSplitterTokensIterator.getNext();\n\n    while (currentPositionIndex < strLength) {\n        const splitterIndex = str.indexOf(splitter, currentPositionIndex);\n\n        if (splitterIndex !== -1) {\n            parts.push(str.slice(currentPositionIndex, splitterIndex + splitter.length));\n            currentPositionIndex += splitterIndex + splitter.length;\n        } else {\n            //TODO: try other splitters then\n            //splitter = nameSplitterTokensIterator.getNext(),\n            parts.push(str.slice(currentPositionIndex, str.length));\n            currentPositionIndex = str.length;\n        }\n    }\n\n    return parts;\n};\n\nexport const getMaxStringLengthFromList = list =>\n    list.reduce((max, current) => {\n        const currentLength = stringWidth(current);\n        return currentLength >= max ? currentLength : max;\n    }, 0);\n",{"ruleId":"366","replacedBy":"367"},{"ruleId":"368","replacedBy":"369"},{"ruleId":"366","replacedBy":"370"},{"ruleId":"368","replacedBy":"371"},{"ruleId":"372","severity":1,"message":"373","line":55,"column":1,"nodeType":"374","endLine":106,"endColumn":3},{"ruleId":"375","severity":1,"message":"376","line":5,"column":5,"nodeType":"377","messageId":"378","endLine":5,"endColumn":21},{"ruleId":"375","severity":1,"message":"379","line":6,"column":5,"nodeType":"377","messageId":"378","endLine":6,"endColumn":22},{"ruleId":"375","severity":1,"message":"380","line":9,"column":10,"nodeType":"377","messageId":"378","endLine":9,"endColumn":21},{"ruleId":"375","severity":1,"message":"381","line":9,"column":23,"nodeType":"377","messageId":"378","endLine":9,"endColumn":37},{"ruleId":"372","severity":1,"message":"373","line":45,"column":1,"nodeType":"374","endLine":63,"endColumn":4},{"ruleId":"372","severity":1,"message":"373","line":108,"column":1,"nodeType":"374","endLine":146,"endColumn":3},{"ruleId":"372","severity":1,"message":"373","line":45,"column":1,"nodeType":"374","endLine":65,"endColumn":3},{"ruleId":"375","severity":1,"message":"382","line":122,"column":13,"nodeType":"377","messageId":"378","endLine":122,"endColumn":30},{"ruleId":"375","severity":1,"message":"383","line":1,"column":23,"nodeType":"377","messageId":"378","endLine":1,"endColumn":33},{"ruleId":"372","severity":1,"message":"384","line":1,"column":1,"nodeType":"374","endLine":13,"endColumn":3},{"ruleId":"375","severity":1,"message":"385","line":294,"column":16,"nodeType":"377","messageId":"378","endLine":294,"endColumn":30},{"ruleId":"386","severity":1,"message":"387","line":39,"column":5,"nodeType":"388","messageId":"389","endLine":78,"endColumn":6},{"ruleId":"372","severity":1,"message":"373","line":88,"column":1,"nodeType":"374","endLine":88,"endColumn":92},{"ruleId":"375","severity":1,"message":"390","line":1,"column":31,"nodeType":"377","messageId":"378","endLine":1,"endColumn":38},{"ruleId":"375","severity":1,"message":"391","line":1,"column":40,"nodeType":"377","messageId":"378","endLine":1,"endColumn":53},{"ruleId":"375","severity":1,"message":"392","line":3,"column":10,"nodeType":"377","messageId":"378","endLine":3,"endColumn":27},{"ruleId":"366","replacedBy":"393"},{"ruleId":"368","replacedBy":"394"},{"ruleId":"395","severity":1,"message":"396","line":38,"column":5,"nodeType":"397","messageId":"398","endLine":56,"endColumn":18},"no-native-reassign",["399"],"no-negated-in-lhs",["400"],["399"],["400"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'MODIFIER_PRESETS' is defined but never used.","Identifier","unusedVar","'DEFINED_MODIFIERS' is defined but never used.","'TOKEN_TYPES' is defined but never used.","'MODIFIED_TYPES' is defined but never used.","'latestParentShape' is assigned a value but never used.","'TOKEN_KEYS' is defined but never used.","Assign object to a variable before exporting as module default","'getFirstCallee' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'getLine' is defined but never used.","'getClosedPath' is defined but never used.","'addOffsetToPoints' is defined but never used.",["399"],["400"],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","no-global-assign","no-unsafe-negation"]