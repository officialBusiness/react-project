[{"/Users/wangxinbo/Desktop/codeParse/react-project/src/index.js":"1","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/InputNumber.js":"2","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Triangle.js":"3","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Arrow.js":"4","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Tree.js":"5","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Dropdown.js":"6","/Users/wangxinbo/Desktop/codeParse/react-project/src/utils.js":"7","/Users/wangxinbo/Desktop/codeParse/react-project/src/App.js":"8","/Users/wangxinbo/Desktop/codeParse/react-project/src/ThreeOperation/ThreeOperation.js":"9","/Users/wangxinbo/Desktop/codeParse/react-project/src/404.js":"10","/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Sidebar.js":"11","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/ComponentsTest.js":"12","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Arrow.js":"13","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Triangle.js":"14","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Dropdown.js":"15","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/InputNumber.js":"16","/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Tree.js":"17","/Users/wangxinbo/Desktop/codeParse/react-project/src/Blog/SourceCode.js":"18","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/dvaTest.js":"19","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/DvaTest.js":"20","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/RichTextBoxTest.js":"21","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/JsCodeToSvgFlowchart.js":"22","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/Js2flowchart.js":"23","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/constants.js":"24","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeBuilder.js":"25","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/presentation-generator/PresentationGenerator.js":"26","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGRender.js":"27","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstractionLevelsConfigurator.js":"28","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/entryDefinitionsMap.js":"29","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astBuilder.js":"30","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeModifier.js":"31","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/svgObjectsBuilder.js":"32","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/modifiers/modifiersFactory.js":"33","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/StyleThemeFactory.js":"34","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astParserConfig.js":"35","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functionDependencies.js":"36","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/core.js":"37","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functions.js":"38","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/Harmony.js":"39","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesFactory.js":"40","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGBase.js":"41","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Blurred.js":"42","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/DefaultBaseTheme.js":"43","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Light.js":"44","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/BlackAndWhite.js":"45","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesDefinitionsMap.js":"46","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/connections/ConnectionArrow.js":"47","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ConditionRhombus.js":"48","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/RootCircle.js":"49","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rectangle.js":"50","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/LoopRhombus.js":"51","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/VerticalEdgedRectangle.js":"52","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ReturnStatement.js":"53","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DestructedNode.js":"54","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportDeclaration.js":"55","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ExportDeclaration.js":"56","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CatchClause.js":"57","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ThrowStatement.js":"58","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchStatement.js":"59","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/TryStatement.js":"60","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ContinueStatement.js":"61","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchCase.js":"62","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BreakStatement.js":"63","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportSpecifier.js":"64","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ObjectProperty.js":"65","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CallExpression.js":"66","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ClassDeclaration.js":"67","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DebuggerStatement.js":"68","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BaseShape.js":"69","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rhombus.js":"70","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/TextContentConfigurator.js":"71","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/logger.js":"72","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/treeLevelsPointer.js":"73","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/composition.js":"74","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversalWithTreeLevelsPointer.js":"75","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversal.js":"76","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/svgPrimitives.js":"77","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/geometry.js":"78","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/iteratorBuilder.js":"79","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/flatten.js":"80","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/string.js":"81","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParser.copy.js":"82","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/BabelParserCopy.js":"83","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ScopeHandler.js":"84","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ProductionParameterHandler.js":"85","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/StatementParser.js":"86","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionScopeHandler.js":"87","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/State.js":"88","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/StatementParser.js":"89","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Parameter.js":"90","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/ExpressionParser.js":"91","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/LValParser.js":"92","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ErrorMessages.js":"93","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/types.js":"94","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionErrors.js":"95","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionScope.js":"96","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ArrowHeadParsingScope.js":"97","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/types$1.js":"98","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/NodeUtils.js":"99","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/UtilParser.js":"100","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/Tokenizer.js":"101","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/ParserError.js":"102","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/CommentsParser.js":"103","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/TokenType.js":"104","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/TokContext.js":"105","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Node.js":"106","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Scope.js":"107","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ClassScopeHandler.js":"108","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ClassScope.js":"109"},{"size":1031,"mtime":1612360932407,"results":"110","hashOfConfig":"111"},{"size":2242,"mtime":1608978416216,"results":"112","hashOfConfig":"113"},{"size":1299,"mtime":1607934855187,"results":"114","hashOfConfig":"113"},{"size":787,"mtime":1607934868048,"results":"115","hashOfConfig":"113"},{"size":4735,"mtime":1608216994659,"results":"116","hashOfConfig":"113"},{"size":1146,"mtime":1607934863981,"results":"117","hashOfConfig":"113"},{"size":5349,"mtime":1612407367848,"results":"118","hashOfConfig":"111"},{"size":1638,"mtime":1609059029013,"results":"119","hashOfConfig":"111"},{"size":200,"mtime":1612360967594,"results":"120","hashOfConfig":"111"},{"size":230,"mtime":1608516461920,"results":"121","hashOfConfig":"111"},{"size":376,"mtime":1608977658554,"results":"122","hashOfConfig":"113"},{"size":2404,"mtime":1613144024150,"results":"123","hashOfConfig":"111"},{"size":787,"mtime":1609050669516,"results":"124","hashOfConfig":"111"},{"size":1299,"mtime":1607934855187,"results":"125","hashOfConfig":"111"},{"size":1146,"mtime":1609061878179,"results":"126","hashOfConfig":"111"},{"size":2910,"mtime":1609059039691,"results":"127","hashOfConfig":"111"},{"size":4741,"mtime":1611942322491,"results":"128","hashOfConfig":"111"},{"size":160,"mtime":1609063627134,"results":"129","hashOfConfig":"113"},{"size":909,"mtime":1609050827278,"results":"130","hashOfConfig":"113"},{"size":102,"mtime":1609059041355,"results":"131","hashOfConfig":"113"},{"size":6046,"mtime":1612099764894,"results":"132","hashOfConfig":"111"},{"size":37751,"mtime":1613201222663,"results":"133","hashOfConfig":"111"},{"size":1382,"mtime":1613023412261,"results":"134","hashOfConfig":"111"},{"size":2703,"mtime":1612188348961,"results":"135","hashOfConfig":"111"},{"size":3092,"mtime":1613024540126,"results":"136","hashOfConfig":"111"},{"size":1765,"mtime":1612708810433,"results":"137","hashOfConfig":"111"},{"size":4717,"mtime":1612709012694,"results":"138","hashOfConfig":"111"},{"size":1397,"mtime":1612706523404,"results":"139","hashOfConfig":"111"},{"size":10599,"mtime":1612701687318,"results":"140","hashOfConfig":"111"},{"size":3503,"mtime":1613201162407,"results":"141","hashOfConfig":"111"},{"size":1629,"mtime":1612706401337,"results":"142","hashOfConfig":"111"},{"size":5936,"mtime":1612711965052,"results":"143","hashOfConfig":"111"},{"size":2591,"mtime":1612707004931,"results":"144","hashOfConfig":"111"},{"size":1261,"mtime":1612702644310,"results":"145","hashOfConfig":"111"},{"size":310,"mtime":1612777115010,"results":"146","hashOfConfig":"111"},{"size":1361,"mtime":1612701267997,"results":"147","hashOfConfig":"111"},{"size":9105,"mtime":1612706917251,"results":"148","hashOfConfig":"111"},{"size":983,"mtime":1612701663237,"results":"149","hashOfConfig":"111"},{"size":1582,"mtime":1612701755022,"results":"150","hashOfConfig":"111"},{"size":2917,"mtime":1612714394175,"results":"151","hashOfConfig":"111"},{"size":1635,"mtime":1612702705445,"results":"152","hashOfConfig":"111"},{"size":717,"mtime":1612188348951,"results":"153","hashOfConfig":"111"},{"size":7110,"mtime":1612188348951,"results":"154","hashOfConfig":"111"},{"size":717,"mtime":1612188348952,"results":"155","hashOfConfig":"111"},{"size":306,"mtime":1612188348951,"results":"156","hashOfConfig":"111"},{"size":2967,"mtime":1612702186229,"results":"157","hashOfConfig":"111"},{"size":2702,"mtime":1612709108210,"results":"158","hashOfConfig":"111"},{"size":4250,"mtime":1612702554684,"results":"159","hashOfConfig":"111"},{"size":1497,"mtime":1612702612824,"results":"160","hashOfConfig":"111"},{"size":1433,"mtime":1612702598155,"results":"161","hashOfConfig":"111"},{"size":3262,"mtime":1612702591861,"results":"162","hashOfConfig":"111"},{"size":1843,"mtime":1612702622096,"results":"163","hashOfConfig":"111"},{"size":3014,"mtime":1612702604950,"results":"164","hashOfConfig":"111"},{"size":2282,"mtime":1612709352237,"results":"165","hashOfConfig":"111"},{"size":232,"mtime":1612188348955,"results":"166","hashOfConfig":"111"},{"size":211,"mtime":1612188348955,"results":"167","hashOfConfig":"111"},{"size":205,"mtime":1612188348953,"results":"168","hashOfConfig":"111"},{"size":190,"mtime":1612188348958,"results":"169","hashOfConfig":"111"},{"size":212,"mtime":1612188348958,"results":"170","hashOfConfig":"111"},{"size":188,"mtime":1612188348958,"results":"171","hashOfConfig":"111"},{"size":211,"mtime":1612188348954,"results":"172","hashOfConfig":"111"},{"size":186,"mtime":1612188348957,"results":"173","hashOfConfig":"111"},{"size":208,"mtime":1612188348953,"results":"174","hashOfConfig":"111"},{"size":191,"mtime":1612188348956,"results":"175","hashOfConfig":"111"},{"size":190,"mtime":1612188348956,"results":"176","hashOfConfig":"111"},{"size":190,"mtime":1612188348953,"results":"177","hashOfConfig":"111"},{"size":231,"mtime":1612188348954,"results":"178","hashOfConfig":"111"},{"size":193,"mtime":1612188348954,"results":"179","hashOfConfig":"111"},{"size":7343,"mtime":1612702850106,"results":"180","hashOfConfig":"111"},{"size":755,"mtime":1612188348957,"results":"181","hashOfConfig":"111"},{"size":376,"mtime":1612702648608,"results":"182","hashOfConfig":"111"},{"size":68,"mtime":1612188348962,"results":"183","hashOfConfig":"111"},{"size":295,"mtime":1612188348964,"results":"184","hashOfConfig":"111"},{"size":273,"mtime":1612188348961,"results":"185","hashOfConfig":"111"},{"size":726,"mtime":1612188348963,"results":"186","hashOfConfig":"111"},{"size":871,"mtime":1612188348963,"results":"187","hashOfConfig":"111"},{"size":4117,"mtime":1612188348963,"results":"188","hashOfConfig":"111"},{"size":856,"mtime":1612188348962,"results":"189","hashOfConfig":"111"},{"size":160,"mtime":1612188348962,"results":"190","hashOfConfig":"111"},{"size":363,"mtime":1612188348962,"results":"191","hashOfConfig":"111"},{"size":1878,"mtime":1612713325192,"results":"192","hashOfConfig":"111"},{"size":411538,"mtime":1613200177784,"results":"193","hashOfConfig":"111"},{"size":2317,"mtime":1613207395599,"results":"194","hashOfConfig":"111"},{"size":4121,"mtime":1613205594728,"results":"195","hashOfConfig":"111"},{"size":641,"mtime":1613136702468,"results":"196","hashOfConfig":"111"},{"size":52847,"mtime":1613140458284,"results":"197","hashOfConfig":"111"},{"size":1952,"mtime":1613141724895,"results":"198","hashOfConfig":"111"},{"size":2108,"mtime":1613207653625,"results":"199","hashOfConfig":"111"},{"size":52102,"mtime":1613136571255,"results":"200","hashOfConfig":"111"},{"size":14608,"mtime":1613207356901,"results":"201","hashOfConfig":"111"},{"size":55503,"mtime":1613139073306,"results":"202","hashOfConfig":"111"},{"size":10675,"mtime":1613141816952,"results":"203","hashOfConfig":"111"},{"size":12292,"mtime":1613136958748,"results":"204","hashOfConfig":"111"},{"size":5245,"mtime":1613143662600,"results":"205","hashOfConfig":"111"},{"size":122,"mtime":1613137418265,"results":"206","hashOfConfig":"111"},{"size":511,"mtime":1613137735866,"results":"207","hashOfConfig":"111"},{"size":408,"mtime":1613137809869,"results":"208","hashOfConfig":"111"},{"size":704,"mtime":1613141883394,"results":"209","hashOfConfig":"111"},{"size":1185,"mtime":1613142439299,"results":"210","hashOfConfig":"111"},{"size":5172,"mtime":1613141467701,"results":"211","hashOfConfig":"111"},{"size":31814,"mtime":1613141406406,"results":"212","hashOfConfig":"111"},{"size":1215,"mtime":1613140880228,"results":"213","hashOfConfig":"111"},{"size":6095,"mtime":1613145363500,"results":"214","hashOfConfig":"111"},{"size":804,"mtime":1613141536219,"results":"215","hashOfConfig":"111"},{"size":334,"mtime":1613141886227,"results":"216","hashOfConfig":"111"},{"size":971,"mtime":1613142492890,"results":"217","hashOfConfig":"111"},{"size":176,"mtime":1613143455353,"results":"218","hashOfConfig":"111"},{"size":2347,"mtime":1613201149123,"results":"219","hashOfConfig":"111"},{"size":174,"mtime":1613201141499,"results":"220","hashOfConfig":"111"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},"188gq72",{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wpv9tt",{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":104,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"389","messages":"390","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"223"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"223"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"405","messages":"406","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"223"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"223"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"223"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"223"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wangxinbo/Desktop/codeParse/react-project/src/index.js",[],["447","448"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/InputNumber.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Triangle.js",[],["449","450"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Arrow.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Tree.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Dropdown.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/utils.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/App.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/ThreeOperation/ThreeOperation.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/404.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/components/Sidebar.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/ComponentsTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Arrow.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Triangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Dropdown.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/InputNumber.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Components/Tree.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Blog/SourceCode.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/dvaTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/DvaTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/RichTextBoxTest.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/JsCodeToSvgFlowchart.js",["451","452","453","454","455","456","457","458","459","460"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/Js2flowchart.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/constants.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeBuilder.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/presentation-generator/PresentationGenerator.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGRender.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstractionLevelsConfigurator.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/entryDefinitionsMap.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astBuilder.js",["461"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/FlowTreeModifier.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/svgObjectsBuilder.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/modifiers/modifiersFactory.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/StyleThemeFactory.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/astParserConfig.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functionDependencies.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/core.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/abstraction-levels/functions.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/converters/Harmony.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesFactory.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/SVGBase.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Blurred.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/DefaultBaseTheme.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/Light.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/themes/BlackAndWhite.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapesDefinitionsMap.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/connections/ConnectionArrow.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ConditionRhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/RootCircle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rectangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/LoopRhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/VerticalEdgedRectangle.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ReturnStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DestructedNode.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ExportDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CatchClause.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ThrowStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/TryStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ContinueStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/SwitchCase.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BreakStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ImportSpecifier.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ObjectProperty.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/CallExpression.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/ClassDeclaration.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/DebuggerStatement.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/BaseShape.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/shapes/Rhombus.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/render/svg/appearance/TextContentConfigurator.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/logger.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/treeLevelsPointer.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/composition.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversalWithTreeLevelsPointer.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/traversal.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/svgPrimitives.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/geometry.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/iteratorBuilder.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/flatten.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/shared/utils/string.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParser.copy.js",["462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/BabelParserCopy.js",["566"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ScopeHandler.js",["567","568","569","570","571","572","573","574"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ProductionParameterHandler.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/StatementParser.js",["575","576","577","578","579","580","581","582","583","584","585","586","587","588","589"],"import ExpressionParser from './ExpressionParser.js'\nimport types from '../types.js'\nimport ErrorMessages from '../ErrorMessages.js'\nimport { loneSurrogate, lineBreak, BIND_CLASS, CLASS_ELEMENT_INSTANCE_SETTER, CLASS_ELEMENT_STATIC_SETTER, CLASS_ELEMENT_INSTANCE_GETTER, CLASS_ELEMENT_STATIC_GETTER, CLASS_ELEMENT_OTHER, PARAM, newExpressionScope, SCOPE_SUPER, SCOPE_CLASS, BIND_FUNCTION, newParameterDeclarationScope, functionFlags, SCOPE_FUNCTION, FUNC_NULLABLE_ID, FUNC_NO_FLAGS, BIND_VAR, BIND_LEXICAL, SCOPE_SIMPLE_CATCH, switchLabel, isIdentifierStart, isIdentifierChar, keywordRelationalOperator, loopLabel, SCOPE_OTHER, FUNC_STATEMENT, FUNC_HANGING_STATEMENT } from '../Parameter.js'\nimport ExpressionErrors from '../ExpressionErrors.js'\n\nexport default class StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, true);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = this.isPrivateName(key);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (this.isPrivateName(key) && this.getPrivateNameSV(key) === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.expressionScope.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation || this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n          const specifier = _node$specifiers[_i3];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n            const declaration = _node$declaration$dec[_i4];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n        const prop = _node$properties[_i5];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n        const elem = _node$elements[_i6];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n        const attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionScopeHandler.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/State.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/StatementParser.js",["590","591","592","593","594","595","596","597","598","599","600","601","602","603","604"],"import ExpressionParser from './ExpressionParser.js'\nimport types from './types.js'\nimport ErrorMessages from './ErrorMessages.js'\nimport ExpressionErrors from './ExpressionErrors.js'\nimport ExpressionScope from './ExpressionScope.js'\n\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\n\nfunction isInAstralSet(code, set) {\n\tlet pos = 0x10000;\n\n\tfor (let i = 0, length = set.length; i < length; i += 2) {\n\t\tpos += set[i];\n\t\tif (pos > code) return false;\n\t\tpos += set[i + 1];\n\t\tif (pos >= code) return true;\n\t}\n\n\treturn false;\n}\nfunction isIdentifierStart(code) {\n\tif (code < 65) return code === 36;\n\tif (code <= 90) return true;\n\tif (code < 97) return code === 95;\n\tif (code <= 122) return true;\n\n\tif (code <= 0xffff) {\n\t\treturn code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n\t}\n\n\treturn isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n\tif (code < 48) return code === 36;\n\tif (code < 58) return true;\n\tif (code < 65) return false;\n\tif (code <= 90) return true;\n\tif (code < 97) return code === 95;\n\tif (code <= 122) return true;\n\n\tif (code <= 0xffff) {\n\t\treturn code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n\t}\n\n\treturn isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nconst loopLabel = {\n\tkind: \"loop\"\n},\nswitchLabel = {\n\tkind: \"switch\"\n};\n\nconst SCOPE_OTHER = 0b00000000,\n\t\t\tSCOPE_FUNCTION = 0b00000010\n\nconst FUNC_NO_FLAGS = 0b000,\n\t\t\tFUNC_STATEMENT = 0b001,\n\t\t\tFUNC_HANGING_STATEMENT = 0b010,\n\t\t\tFUNC_NULLABLE_ID = 0b100;\nconst PARAM = 0b0000\n\nconst\tSCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_SUPER = 0b00010000\n\nconst\t\n\t\t\tBIND_KIND_VALUE = 0b00000000001,\n\t\t\tBIND_KIND_TYPE = 0b00000000010,\n\t\t\tBIND_FLAGS_CLASS = 0b00010000000,\n\t\t\tBIND_SCOPE_VAR = 0b00000000100,\n\t\t\tBIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n\t\t\tBIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n\t\t\tBIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n\t\t\tBIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS\n\nconst \n\t\t\tCLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_OTHER = 0,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n\t\t\tCLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nconst \n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010\n\nconst\tkParameterDeclaration = 3\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nexport default class StatementParser extends ExpressionParser {\n\tparseTopLevel(file, program) {\n\t\tprogram.sourceType = this.options.sourceType;\n\t\tprogram.interpreter = this.parseInterpreterDirective();\n\t\tthis.parseBlockBody(program, true, true, types.eof);\n\n\t\tif (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n\t\t\tfor (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n\t\t\t\tconst [name] = _Array$from[_i];\n\t\t\t\tconst pos = this.scope.undefinedExports.get(name);\n\t\t\t\tthis.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n\t\t\t}\n\t\t}\n\n\t\tfile.program = this.finishNode(program, \"Program\");\n\t\tfile.comments = this.state.comments;\n\t\tif (this.options.tokens) file.tokens = this.tokens;\n\t\treturn this.finishNode(file, \"File\");\n\t}\n\n\tstmtToDirective(stmt) {\n\t\tconst expr = stmt.expression;\n\t\tconst directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n\t\tconst directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\t\tconst raw = this.input.slice(expr.start, expr.end);\n\t\tconst val = directiveLiteral.value = raw.slice(1, -1);\n\t\tthis.addExtra(directiveLiteral, \"raw\", raw);\n\t\tthis.addExtra(directiveLiteral, \"rawValue\", val);\n\t\tdirective.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n\t\treturn this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n\t}\n\n\tparseInterpreterDirective() {\n\t\tif (!this.match(types.interpreterDirective)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst node = this.startNode();\n\t\tnode.value = this.state.value;\n\t\tthis.next();\n\t\treturn this.finishNode(node, \"InterpreterDirective\");\n\t}\n\n\tisLet(context) {\n\t\tif (!this.isContextual(\"let\")) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst next = this.nextTokenStart();\n\t\tconst nextCh = this.input.charCodeAt(next);\n\t\tif (nextCh === 91) return true;\n\t\tif (context) return false;\n\t\tif (nextCh === 123) return true;\n\n\t\tif (isIdentifierStart(nextCh)) {\n\t\t\tlet pos = next + 1;\n\n\t\t\twhile (isIdentifierChar(this.input.charCodeAt(pos))) {\n\t\t\t\t++pos;\n\t\t\t}\n\n\t\t\tconst ident = this.input.slice(next, pos);\n\t\t\tif (!keywordRelationalOperator.test(ident)) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tparseStatement(context, topLevel) {\n\t\tif (this.match(types.at)) {\n\t\t\tthis.parseDecorators(true);\n\t\t}\n\n\t\treturn this.parseStatementContent(context, topLevel);\n\t}\n\n\tparseStatementContent(context, topLevel) {\n\t\tlet starttype = this.state.type;\n\t\tconst node = this.startNode();\n\t\tlet kind;\n\n\t\tif (this.isLet(context)) {\n\t\t\tstarttype = types._var;\n\t\t\tkind = \"let\";\n\t\t}\n\n\t\tswitch (starttype) {\n\t\t\tcase types._break:\n\t\t\tcase types._continue:\n\t\t\t\treturn this.parseBreakContinueStatement(node, starttype.keyword);\n\n\t\t\tcase types._debugger:\n\t\t\t\treturn this.parseDebuggerStatement(node);\n\n\t\t\tcase types._do:\n\t\t\t\treturn this.parseDoStatement(node);\n\n\t\t\tcase types._for:\n\t\t\t\treturn this.parseForStatement(node);\n\n\t\t\tcase types._function:\n\t\t\t\tif (this.lookaheadCharCode() === 46) break;\n\n\t\t\t\tif (context) {\n\t\t\t\t\tif (this.state.strict) {\n\t\t\t\t\t\tthis.raise(this.state.start, ErrorMessages.StrictFunction);\n\t\t\t\t\t} else if (context !== \"if\" && context !== \"label\") {\n\t\t\t\t\t\tthis.raise(this.state.start, ErrorMessages.SloppyFunction);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.parseFunctionStatement(node, false, !context);\n\n\t\t\tcase types._class:\n\t\t\t\tif (context) this.unexpected();\n\t\t\t\treturn this.parseClass(node, true);\n\n\t\t\tcase types._if:\n\t\t\t\treturn this.parseIfStatement(node);\n\n\t\t\tcase types._return:\n\t\t\t\treturn this.parseReturnStatement(node);\n\n\t\t\tcase types._switch:\n\t\t\t\treturn this.parseSwitchStatement(node);\n\n\t\t\tcase types._throw:\n\t\t\t\treturn this.parseThrowStatement(node);\n\n\t\t\tcase types._try:\n\t\t\t\treturn this.parseTryStatement(node);\n\n\t\t\tcase types._const:\n\t\t\tcase types._var:\n\t\t\t\tkind = kind || this.state.value;\n\n\t\t\t\tif (context && kind !== \"var\") {\n\t\t\t\t\tthis.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n\t\t\t\t}\n\n\t\t\t\treturn this.parseVarStatement(node, kind);\n\n\t\t\tcase types._while:\n\t\t\t\treturn this.parseWhileStatement(node);\n\n\t\t\tcase types._with:\n\t\t\t\treturn this.parseWithStatement(node);\n\n\t\t\tcase types.braceL:\n\t\t\t\treturn this.parseBlock();\n\n\t\t\tcase types.semi:\n\t\t\t\treturn this.parseEmptyStatement(node);\n\n\t\t\tcase types._import:\n\t\t\t\t{\n\t\t\t\t\tconst nextTokenCharCode = this.lookaheadCharCode();\n\n\t\t\t\t\tif (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tcase types._export:\n\t\t\t\t{\n\t\t\t\t\tif (!this.options.allowImportExportEverywhere && !topLevel) {\n\t\t\t\t\t\tthis.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.next();\n\t\t\t\t\tlet result;\n\n\t\t\t\t\tif (starttype === types._import) {\n\t\t\t\t\t\tresult = this.parseImport(node);\n\n\t\t\t\t\t\tif (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n\t\t\t\t\t\t\tthis.sawUnambiguousESM = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = this.parseExport(node);\n\n\t\t\t\t\t\tif (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n\t\t\t\t\t\t\tthis.sawUnambiguousESM = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assertModuleNodeAllowed(node);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\tif (this.isAsyncFunction()) {\n\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\tthis.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.next();\n\t\t\t\t\t\treturn this.parseFunctionStatement(node, true, !context);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tconst maybeName = this.state.value;\n\t\tconst expr = this.parseExpression();\n\n\t\tif (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n\t\t\treturn this.parseLabeledStatement(node, maybeName, expr, context);\n\t\t} else {\n\t\t\treturn this.parseExpressionStatement(node, expr);\n\t\t}\n\t}\n\n\tassertModuleNodeAllowed(node) {\n\t\tif (!this.options.allowImportExportEverywhere && !this.inModule) {\n\t\t\tthis.raiseWithData(node.start, {\n\t\t\t\tcode: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n\t\t\t}, ErrorMessages.ImportOutsideModule);\n\t\t}\n\t}\n\n\ttakeDecorators(node) {\n\t\tconst decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n\t\tif (decorators.length) {\n\t\t\tnode.decorators = decorators;\n\t\t\tthis.resetStartLocationFromNode(node, decorators[0]);\n\t\t\tthis.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n\t\t}\n\t}\n\n\tcanHaveLeadingDecorator() {\n\t\treturn this.match(types._class);\n\t}\n\n\tparseDecorators(allowExport) {\n\t\tconst currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n\t\twhile (this.match(types.at)) {\n\t\t\tconst decorator = this.parseDecorator();\n\t\t\tcurrentContextDecorators.push(decorator);\n\t\t}\n\n\t\tif (this.match(types._export)) {\n\t\t\tif (!allowExport) {\n\t\t\t\tthis.unexpected();\n\t\t\t}\n\n\t\t\tif (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n\t\t\t\tthis.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n\t\t\t}\n\t\t} else if (!this.canHaveLeadingDecorator()) {\n\t\t\tthrow this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n\t\t}\n\t}\n\n\tparseDecorator() {\n\t\tthis.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\t\tconst node = this.startNode();\n\t\tthis.next();\n\n\t\tif (this.hasPlugin(\"decorators\")) {\n\t\t\tthis.state.decoratorStack.push([]);\n\t\t\tconst startPos = this.state.start;\n\t\t\tconst startLoc = this.state.startLoc;\n\t\t\tlet expr;\n\n\t\t\tif (this.eat(types.parenL)) {\n\t\t\t\texpr = this.parseExpression();\n\t\t\t\tthis.expect(types.parenR);\n\t\t\t} else {\n\t\t\t\texpr = this.parseIdentifier(false);\n\n\t\t\t\twhile (this.eat(types.dot)) {\n\t\t\t\t\tconst node = this.startNodeAt(startPos, startLoc);\n\t\t\t\t\tnode.object = expr;\n\t\t\t\t\tnode.property = this.parseIdentifier(true);\n\t\t\t\t\tnode.computed = false;\n\t\t\t\t\texpr = this.finishNode(node, \"MemberExpression\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnode.expression = this.parseMaybeDecoratorArguments(expr);\n\t\t\tthis.state.decoratorStack.pop();\n\t\t} else {\n\t\t\tnode.expression = this.parseExprSubscripts();\n\t\t}\n\n\t\treturn this.finishNode(node, \"Decorator\");\n\t}\n\n\tparseMaybeDecoratorArguments(expr) {\n\t\tif (this.eat(types.parenL)) {\n\t\t\tconst node = this.startNodeAtNode(expr);\n\t\t\tnode.callee = expr;\n\t\t\tnode.arguments = this.parseCallExpressionArguments(types.parenR, false);\n\t\t\tthis.toReferencedList(node.arguments);\n\t\t\treturn this.finishNode(node, \"CallExpression\");\n\t\t}\n\n\t\treturn expr;\n\t}\n\n\tparseBreakContinueStatement(node, keyword) {\n\t\tconst isBreak = keyword === \"break\";\n\t\tthis.next();\n\n\t\tif (this.isLineTerminator()) {\n\t\t\tnode.label = null;\n\t\t} else {\n\t\t\tnode.label = this.parseIdentifier();\n\t\t\tthis.semicolon();\n\t\t}\n\n\t\tthis.verifyBreakContinue(node, keyword);\n\t\treturn this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\t}\n\n\tverifyBreakContinue(node, keyword) {\n\t\tconst isBreak = keyword === \"break\";\n\t\tlet i;\n\n\t\tfor (i = 0; i < this.state.labels.length; ++i) {\n\t\t\tconst lab = this.state.labels[i];\n\n\t\t\tif (node.label == null || lab.name === node.label.name) {\n\t\t\t\tif (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n\t\t\t\tif (node.label && isBreak) break;\n\t\t\t}\n\t\t}\n\n\t\tif (i === this.state.labels.length) {\n\t\t\tthis.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n\t\t}\n\t}\n\n\tparseDebuggerStatement(node) {\n\t\tthis.next();\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"DebuggerStatement\");\n\t}\n\n\tparseHeaderExpression() {\n\t\tthis.expect(types.parenL);\n\t\tconst val = this.parseExpression();\n\t\tthis.expect(types.parenR);\n\t\treturn val;\n\t}\n\n\tparseDoStatement(node) {\n\t\tthis.next();\n\t\tthis.state.labels.push(loopLabel);\n\t\tnode.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n\t\tthis.state.labels.pop();\n\t\tthis.expect(types._while);\n\t\tnode.test = this.parseHeaderExpression();\n\t\tthis.eat(types.semi);\n\t\treturn this.finishNode(node, \"DoWhileStatement\");\n\t}\n\n\tparseForStatement(node) {\n\t\tthis.next();\n\t\tthis.state.labels.push(loopLabel);\n\t\tlet awaitAt = -1;\n\n\t\tif (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n\t\t\tawaitAt = this.state.lastTokStart;\n\t\t}\n\n\t\tthis.scope.enter(SCOPE_OTHER);\n\t\tthis.expect(types.parenL);\n\n\t\tif (this.match(types.semi)) {\n\t\t\tif (awaitAt > -1) {\n\t\t\t\tthis.unexpected(awaitAt);\n\t\t\t}\n\n\t\t\treturn this.parseFor(node, null);\n\t\t}\n\n\t\tconst isLet = this.isLet();\n\n\t\tif (this.match(types._var) || this.match(types._const) || isLet) {\n\t\t\tconst init = this.startNode();\n\t\t\tconst kind = isLet ? \"let\" : this.state.value;\n\t\t\tthis.next();\n\t\t\tthis.parseVar(init, true, kind);\n\t\t\tthis.finishNode(init, \"VariableDeclaration\");\n\n\t\t\tif ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n\t\t\t\treturn this.parseForIn(node, init, awaitAt);\n\t\t\t}\n\n\t\t\tif (awaitAt > -1) {\n\t\t\t\tthis.unexpected(awaitAt);\n\t\t\t}\n\n\t\t\treturn this.parseFor(node, init);\n\t\t}\n\n\t\tconst refExpressionErrors = new ExpressionErrors();\n\t\tconst init = this.parseExpression(true, refExpressionErrors);\n\n\t\tif (this.match(types._in) || this.isContextual(\"of\")) {\n\t\t\tthis.toAssignable(init, true);\n\t\t\tconst description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n\t\t\tthis.checkLVal(init, description);\n\t\t\treturn this.parseForIn(node, init, awaitAt);\n\t\t} else {\n\t\t\tthis.checkExpressionErrors(refExpressionErrors, true);\n\t\t}\n\n\t\tif (awaitAt > -1) {\n\t\t\tthis.unexpected(awaitAt);\n\t\t}\n\n\t\treturn this.parseFor(node, init);\n\t}\n\n\tparseFunctionStatement(node, isAsync, declarationPosition) {\n\t\tthis.next();\n\t\treturn this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n\t}\n\n\tparseIfStatement(node) {\n\t\tthis.next();\n\t\tnode.test = this.parseHeaderExpression();\n\t\tnode.consequent = this.parseStatement(\"if\");\n\t\tnode.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n\t\treturn this.finishNode(node, \"IfStatement\");\n\t}\n\n\tparseReturnStatement(node) {\n\t\tif (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n\t\t\tthis.raise(this.state.start, ErrorMessages.IllegalReturn);\n\t\t}\n\n\t\tthis.next();\n\n\t\tif (this.isLineTerminator()) {\n\t\t\tnode.argument = null;\n\t\t} else {\n\t\t\tnode.argument = this.parseExpression();\n\t\t\tthis.semicolon();\n\t\t}\n\n\t\treturn this.finishNode(node, \"ReturnStatement\");\n\t}\n\n\tparseSwitchStatement(node) {\n\t\tthis.next();\n\t\tnode.discriminant = this.parseHeaderExpression();\n\t\tconst cases = node.cases = [];\n\t\tthis.expect(types.braceL);\n\t\tthis.state.labels.push(switchLabel);\n\t\tthis.scope.enter(SCOPE_OTHER);\n\t\tlet cur;\n\n\t\tfor (let sawDefault; !this.match(types.braceR);) {\n\t\t\tif (this.match(types._case) || this.match(types._default)) {\n\t\t\t\tconst isCase = this.match(types._case);\n\t\t\t\tif (cur) this.finishNode(cur, \"SwitchCase\");\n\t\t\t\tcases.push(cur = this.startNode());\n\t\t\t\tcur.consequent = [];\n\t\t\t\tthis.next();\n\n\t\t\t\tif (isCase) {\n\t\t\t\t\tcur.test = this.parseExpression();\n\t\t\t\t} else {\n\t\t\t\t\tif (sawDefault) {\n\t\t\t\t\t\tthis.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n\t\t\t\t\t}\n\n\t\t\t\t\tsawDefault = true;\n\t\t\t\t\tcur.test = null;\n\t\t\t\t}\n\n\t\t\t\tthis.expect(types.colon);\n\t\t\t} else {\n\t\t\t\tif (cur) {\n\t\t\t\t\tcur.consequent.push(this.parseStatement(null));\n\t\t\t\t} else {\n\t\t\t\t\tthis.unexpected();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.scope.exit();\n\t\tif (cur) this.finishNode(cur, \"SwitchCase\");\n\t\tthis.next();\n\t\tthis.state.labels.pop();\n\t\treturn this.finishNode(node, \"SwitchStatement\");\n\t}\n\n\tparseThrowStatement(node) {\n\t\tthis.next();\n\n\t\tif (this.hasPrecedingLineBreak()) {\n\t\t\tthis.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n\t\t}\n\n\t\tnode.argument = this.parseExpression();\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"ThrowStatement\");\n\t}\n\n\tparseCatchClauseParam() {\n\t\tconst param = this.parseBindingAtom();\n\t\tconst simple = param.type === \"Identifier\";\n\t\tthis.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n\t\tthis.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\t\treturn param;\n\t}\n\n\tparseTryStatement(node) {\n\t\tthis.next();\n\t\tnode.block = this.parseBlock();\n\t\tnode.handler = null;\n\n\t\tif (this.match(types._catch)) {\n\t\t\tconst clause = this.startNode();\n\t\t\tthis.next();\n\n\t\t\tif (this.match(types.parenL)) {\n\t\t\t\tthis.expect(types.parenL);\n\t\t\t\tclause.param = this.parseCatchClauseParam();\n\t\t\t\tthis.expect(types.parenR);\n\t\t\t} else {\n\t\t\t\tclause.param = null;\n\t\t\t\tthis.scope.enter(SCOPE_OTHER);\n\t\t\t}\n\n\t\t\tclause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n\t\t\tthis.scope.exit();\n\t\t\tnode.handler = this.finishNode(clause, \"CatchClause\");\n\t\t}\n\n\t\tnode.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n\t\tif (!node.handler && !node.finalizer) {\n\t\t\tthis.raise(node.start, ErrorMessages.NoCatchOrFinally);\n\t\t}\n\n\t\treturn this.finishNode(node, \"TryStatement\");\n\t}\n\n\tparseVarStatement(node, kind) {\n\t\tthis.next();\n\t\tthis.parseVar(node, false, kind);\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"VariableDeclaration\");\n\t}\n\n\tparseWhileStatement(node) {\n\t\tthis.next();\n\t\tnode.test = this.parseHeaderExpression();\n\t\tthis.state.labels.push(loopLabel);\n\t\tnode.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n\t\tthis.state.labels.pop();\n\t\treturn this.finishNode(node, \"WhileStatement\");\n\t}\n\n\tparseWithStatement(node) {\n\t\tif (this.state.strict) {\n\t\t\tthis.raise(this.state.start, ErrorMessages.StrictWith);\n\t\t}\n\n\t\tthis.next();\n\t\tnode.object = this.parseHeaderExpression();\n\t\tnode.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n\t\treturn this.finishNode(node, \"WithStatement\");\n\t}\n\n\tparseEmptyStatement(node) {\n\t\tthis.next();\n\t\treturn this.finishNode(node, \"EmptyStatement\");\n\t}\n\n\tparseLabeledStatement(node, maybeName, expr, context) {\n\t\tfor (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n\t\t\tconst label = _this$state$labels[_i2];\n\n\t\t\tif (label.name === maybeName) {\n\t\t\t\tthis.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n\t\t\t}\n\t\t}\n\n\t\tconst kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n\t\tfor (let i = this.state.labels.length - 1; i >= 0; i--) {\n\t\t\tconst label = this.state.labels[i];\n\n\t\t\tif (label.statementStart === node.start) {\n\t\t\t\tlabel.statementStart = this.state.start;\n\t\t\t\tlabel.kind = kind;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.state.labels.push({\n\t\t\tname: maybeName,\n\t\t\tkind: kind,\n\t\t\tstatementStart: this.state.start\n\t\t});\n\t\tnode.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n\t\tthis.state.labels.pop();\n\t\tnode.label = expr;\n\t\treturn this.finishNode(node, \"LabeledStatement\");\n\t}\n\n\tparseExpressionStatement(node, expr) {\n\t\tnode.expression = expr;\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"ExpressionStatement\");\n\t}\n\n\tparseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n\t\tconst node = this.startNode();\n\n\t\tif (allowDirectives) {\n\t\t\tthis.state.strictErrors.clear();\n\t\t}\n\n\t\tthis.expect(types.braceL);\n\n\t\tif (createNewLexicalScope) {\n\t\t\tthis.scope.enter(SCOPE_OTHER);\n\t\t}\n\n\t\tthis.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n\t\tif (createNewLexicalScope) {\n\t\t\tthis.scope.exit();\n\t\t}\n\n\t\treturn this.finishNode(node, \"BlockStatement\");\n\t}\n\n\tisValidDirective(stmt) {\n\t\treturn stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n\t}\n\n\tparseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n\t\tconst body = node.body = [];\n\t\tconst directives = node.directives = [];\n\t\tthis.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n\t}\n\n\tparseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n\t\tconst oldStrict = this.state.strict;\n\t\tlet hasStrictModeDirective = false;\n\t\tlet parsedNonDirective = false;\n\n\t\twhile (!this.match(end)) {\n\t\t\tconst stmt = this.parseStatement(null, topLevel);\n\n\t\t\tif (directives && !parsedNonDirective) {\n\t\t\t\tif (this.isValidDirective(stmt)) {\n\t\t\t\t\tconst directive = this.stmtToDirective(stmt);\n\t\t\t\t\tdirectives.push(directive);\n\n\t\t\t\t\tif (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n\t\t\t\t\t\thasStrictModeDirective = true;\n\t\t\t\t\t\tthis.setStrict(true);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparsedNonDirective = true;\n\t\t\t\tthis.state.strictErrors.clear();\n\t\t\t}\n\n\t\t\tbody.push(stmt);\n\t\t}\n\n\t\tif (afterBlockParse) {\n\t\t\tafterBlockParse.call(this, hasStrictModeDirective);\n\t\t}\n\n\t\tif (!oldStrict) {\n\t\t\tthis.setStrict(false);\n\t\t}\n\n\t\tthis.next();\n\t}\n\n\tparseFor(node, init) {\n\t\tnode.init = init;\n\t\tthis.expect(types.semi);\n\t\tnode.test = this.match(types.semi) ? null : this.parseExpression();\n\t\tthis.expect(types.semi);\n\t\tnode.update = this.match(types.parenR) ? null : this.parseExpression();\n\t\tthis.expect(types.parenR);\n\t\tnode.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n\t\tthis.scope.exit();\n\t\tthis.state.labels.pop();\n\t\treturn this.finishNode(node, \"ForStatement\");\n\t}\n\n\tparseForIn(node, init, awaitAt) {\n\t\tconst isForIn = this.match(types._in);\n\t\tthis.next();\n\n\t\tif (isForIn) {\n\t\t\tif (awaitAt > -1) this.unexpected(awaitAt);\n\t\t} else {\n\t\t\tnode.await = awaitAt > -1;\n\t\t}\n\n\t\tif (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n\t\t\tthis.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n\t\t} else if (init.type === \"AssignmentPattern\") {\n\t\t\tthis.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n\t\t}\n\n\t\tnode.left = init;\n\t\tnode.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n\t\tthis.expect(types.parenR);\n\t\tnode.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n\t\tthis.scope.exit();\n\t\tthis.state.labels.pop();\n\t\treturn this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n\t}\n\n\tparseVar(node, isFor, kind) {\n\t\tconst declarations = node.declarations = [];\n\t\tconst isTypescript = this.hasPlugin(\"typescript\");\n\t\tnode.kind = kind;\n\n\t\tfor (;;) {\n\t\t\tconst decl = this.startNode();\n\t\t\tthis.parseVarId(decl, kind);\n\n\t\t\tif (this.eat(types.eq)) {\n\t\t\t\tdecl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n\t\t\t} else {\n\t\t\t\tif (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n\t\t\t\t\tif (!isTypescript) {\n\t\t\t\t\t\tthis.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n\t\t\t\t\t}\n\t\t\t\t} else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n\t\t\t\t\tthis.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n\t\t\t\t}\n\n\t\t\t\tdecl.init = null;\n\t\t\t}\n\n\t\t\tdeclarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n\t\t\tif (!this.eat(types.comma)) break;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tparseVarId(decl, kind) {\n\t\tdecl.id = this.parseBindingAtom();\n\t\tthis.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n\t}\n\n\tparseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n\t\tconst isStatement = statement & FUNC_STATEMENT;\n\t\tconst isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n\t\tconst requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\t\tthis.initFunction(node, isAsync);\n\n\t\tif (this.match(types.star) && isHangingStatement) {\n\t\t\tthis.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n\t\t}\n\n\t\tnode.generator = this.eat(types.star);\n\n\t\tif (isStatement) {\n\t\t\tnode.id = this.parseFunctionId(requireId);\n\t\t}\n\n\t\tconst oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\t\tthis.state.maybeInArrowParameters = false;\n\t\tthis.scope.enter(SCOPE_FUNCTION);\n\t\tthis.prodParam.enter(functionFlags(isAsync, node.generator));\n\n\t\tif (!isStatement) {\n\t\t\tnode.id = this.parseFunctionId();\n\t\t}\n\n\t\tthis.parseFunctionParams(node, false);\n\t\tthis.withTopicForbiddingContext(() => {\n\t\t\tthis.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n\t\t});\n\t\tthis.prodParam.exit();\n\t\tthis.scope.exit();\n\n\t\tif (isStatement && !isHangingStatement) {\n\t\t\tthis.registerFunctionStatementId(node);\n\t\t}\n\n\t\tthis.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\t\treturn node;\n\t}\n\n\tparseFunctionId(requireId) {\n\t\treturn requireId || this.match(types.name) ? this.parseIdentifier() : null;\n\t}\n\n\tparseFunctionParams(node, allowModifiers) {\n\t\tthis.expect(types.parenL);\n\t\tthis.expressionScope.enter(newParameterDeclarationScope());\n\t\tnode.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n\t\tthis.expressionScope.exit();\n\t}\n\n\tregisterFunctionStatementId(node) {\n\t\tif (!node.id) return;\n\t\tthis.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n\t}\n\n\tparseClass(node, isStatement, optionalId) {\n\t\tthis.next();\n\t\tthis.takeDecorators(node);\n\t\tconst oldStrict = this.state.strict;\n\t\tthis.state.strict = true;\n\t\tthis.parseClassId(node, isStatement, optionalId);\n\t\tthis.parseClassSuper(node);\n\t\tnode.body = this.parseClassBody(!!node.superClass, oldStrict);\n\t\treturn this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n\t}\n\n\tisClassProperty() {\n\t\treturn this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n\t}\n\n\tisClassMethod() {\n\t\treturn this.match(types.parenL);\n\t}\n\n\tisNonstaticConstructor(method) {\n\t\treturn !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n\t}\n\n\tparseClassBody(constructorAllowsSuper, oldStrict) {\n\t\tthis.classScope.enter();\n\t\tconst state = {\n\t\t\tconstructorAllowsSuper,\n\t\t\thadConstructor: false,\n\t\t\thadStaticBlock: false\n\t\t};\n\t\tlet decorators = [];\n\t\tconst classBody = this.startNode();\n\t\tclassBody.body = [];\n\t\tthis.expect(types.braceL);\n\t\tthis.withTopicForbiddingContext(() => {\n\t\t\twhile (!this.match(types.braceR)) {\n\t\t\t\tif (this.eat(types.semi)) {\n\t\t\t\t\tif (decorators.length > 0) {\n\t\t\t\t\t\tthrow this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this.match(types.at)) {\n\t\t\t\t\tdecorators.push(this.parseDecorator());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst member = this.startNode();\n\n\t\t\t\tif (decorators.length) {\n\t\t\t\t\tmember.decorators = decorators;\n\t\t\t\t\tthis.resetStartLocationFromNode(member, decorators[0]);\n\t\t\t\t\tdecorators = [];\n\t\t\t\t}\n\n\t\t\t\tthis.parseClassMember(classBody, member, state);\n\n\t\t\t\tif (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n\t\t\t\t\tthis.raise(member.start, ErrorMessages.DecoratorConstructor);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.state.strict = oldStrict;\n\t\tthis.next();\n\n\t\tif (decorators.length) {\n\t\t\tthrow this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n\t\t}\n\n\t\tthis.classScope.exit();\n\t\treturn this.finishNode(classBody, \"ClassBody\");\n\t}\n\n\tparseClassMemberFromModifier(classBody, member) {\n\t\tconst key = this.parseIdentifier(true);\n\n\t\tif (this.isClassMethod()) {\n\t\t\tconst method = member;\n\t\t\tmethod.kind = \"method\";\n\t\t\tmethod.computed = false;\n\t\t\tmethod.key = key;\n\t\t\tmethod.static = false;\n\t\t\tthis.pushClassMethod(classBody, method, false, false, false, false);\n\t\t\treturn true;\n\t\t} else if (this.isClassProperty()) {\n\t\t\tconst prop = member;\n\t\t\tprop.computed = false;\n\t\t\tprop.key = key;\n\t\t\tprop.static = false;\n\t\t\tclassBody.body.push(this.parseClassProperty(prop));\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tparseClassMember(classBody, member, state) {\n\t\tconst isStatic = this.isContextual(\"static\");\n\n\t\tif (isStatic) {\n\t\t\tif (this.parseClassMemberFromModifier(classBody, member)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.eat(types.braceL)) {\n\t\t\t\tthis.parseClassStaticBlock(classBody, member, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n\t}\n\n\tparseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n\t\tconst publicMethod = member;\n\t\tconst privateMethod = member;\n\t\tconst publicProp = member;\n\t\tconst privateProp = member;\n\t\tconst method = publicMethod;\n\t\tconst publicMember = publicMethod;\n\t\tmember.static = isStatic;\n\n\t\tif (this.eat(types.star)) {\n\t\t\tmethod.kind = \"method\";\n\t\t\tthis.parseClassElementName(method);\n\n\t\t\tif (this.isPrivateName(method.key)) {\n\t\t\t\tthis.pushClassPrivateMethod(classBody, privateMethod, true, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isNonstaticConstructor(publicMethod)) {\n\t\t\t\tthis.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n\t\t\t}\n\n\t\t\tthis.pushClassMethod(classBody, publicMethod, true, false, false, false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst containsEsc = this.state.containsEsc;\n\t\tconst key = this.parseClassElementName(member);\n\t\tconst isPrivate = this.isPrivateName(key);\n\t\tconst isSimple = key.type === \"Identifier\";\n\t\tconst maybeQuestionTokenStart = this.state.start;\n\t\tthis.parsePostMemberNameModifiers(publicMember);\n\n\t\tif (this.isClassMethod()) {\n\t\t\tmethod.kind = \"method\";\n\n\t\t\tif (isPrivate) {\n\t\t\t\tthis.pushClassPrivateMethod(classBody, privateMethod, false, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isConstructor = this.isNonstaticConstructor(publicMethod);\n\t\t\tlet allowsDirectSuper = false;\n\n\t\t\tif (isConstructor) {\n\t\t\t\tpublicMethod.kind = \"constructor\";\n\n\t\t\t\tif (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n\t\t\t\t\tthis.raise(key.start, ErrorMessages.DuplicateConstructor);\n\t\t\t\t}\n\n\t\t\t\tstate.hadConstructor = true;\n\t\t\t\tallowsDirectSuper = state.constructorAllowsSuper;\n\t\t\t}\n\n\t\t\tthis.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n\t\t} else if (this.isClassProperty()) {\n\t\t\tif (isPrivate) {\n\t\t\t\tthis.pushClassPrivateProperty(classBody, privateProp);\n\t\t\t} else {\n\t\t\t\tthis.pushClassProperty(classBody, publicProp);\n\t\t\t}\n\t\t} else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n\t\t\tconst isGenerator = this.eat(types.star);\n\n\t\t\tif (publicMember.optional) {\n\t\t\t\tthis.unexpected(maybeQuestionTokenStart);\n\t\t\t}\n\n\t\t\tmethod.kind = \"method\";\n\t\t\tthis.parseClassElementName(method);\n\t\t\tthis.parsePostMemberNameModifiers(publicMember);\n\n\t\t\tif (this.isPrivateName(method.key)) {\n\t\t\t\tthis.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n\t\t\t} else {\n\t\t\t\tif (this.isNonstaticConstructor(publicMethod)) {\n\t\t\t\t\tthis.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n\t\t\t\t}\n\n\t\t\t\tthis.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n\t\t\t}\n\t\t} else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n\t\t\tmethod.kind = key.name;\n\t\t\tthis.parseClassElementName(publicMethod);\n\n\t\t\tif (this.isPrivateName(method.key)) {\n\t\t\t\tthis.pushClassPrivateMethod(classBody, privateMethod, false, false);\n\t\t\t} else {\n\t\t\t\tif (this.isNonstaticConstructor(publicMethod)) {\n\t\t\t\t\tthis.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n\t\t\t\t}\n\n\t\t\t\tthis.pushClassMethod(classBody, publicMethod, false, false, false, false);\n\t\t\t}\n\n\t\t\tthis.checkGetterSetterParams(publicMethod);\n\t\t} else if (this.isLineTerminator()) {\n\t\t\tif (isPrivate) {\n\t\t\t\tthis.pushClassPrivateProperty(classBody, privateProp);\n\t\t\t} else {\n\t\t\t\tthis.pushClassProperty(classBody, publicProp);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.unexpected();\n\t\t}\n\t}\n\n\tparseClassElementName(member) {\n\t\tconst key = this.parsePropertyName(member, true);\n\n\t\tif (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n\t\t\tthis.raise(key.start, ErrorMessages.StaticPrototype);\n\t\t}\n\n\t\tif (this.isPrivateName(key) && this.getPrivateNameSV(key) === \"constructor\") {\n\t\t\tthis.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n\t\t}\n\n\t\treturn key;\n\t}\n\n\tparseClassStaticBlock(classBody, member, state) {\n\t\tvar _member$decorators;\n\n\t\tthis.expectPlugin(\"classStaticBlock\", member.start);\n\t\tthis.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\t\tthis.expressionScope.enter(newExpressionScope());\n\t\tconst oldLabels = this.state.labels;\n\t\tthis.state.labels = [];\n\t\tthis.prodParam.enter(PARAM);\n\t\tconst body = member.body = [];\n\t\tthis.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n\t\tthis.prodParam.exit();\n\t\tthis.expressionScope.exit();\n\t\tthis.scope.exit();\n\t\tthis.state.labels = oldLabels;\n\t\tclassBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n\t\tif (state.hadStaticBlock) {\n\t\t\tthis.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n\t\t}\n\n\t\tif ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n\t\t\tthis.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n\t\t}\n\n\t\tstate.hadStaticBlock = true;\n\t}\n\n\tpushClassProperty(classBody, prop) {\n\t\tif (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n\t\t\tthis.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n\t\t}\n\n\t\tclassBody.body.push(this.parseClassProperty(prop));\n\t}\n\n\tpushClassPrivateProperty(classBody, prop) {\n\t\tthis.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\t\tconst node = this.parseClassPrivateProperty(prop);\n\t\tclassBody.body.push(node);\n\t\tthis.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n\t}\n\n\tpushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n\t\tclassBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n\t}\n\n\tpushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n\t\tthis.expectPlugin(\"classPrivateMethods\", method.key.start);\n\t\tconst node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n\t\tclassBody.body.push(node);\n\t\tconst kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n\t\tthis.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n\t}\n\n\tparsePostMemberNameModifiers(methodOrProp) {}\n\n\tparseClassPrivateProperty(node) {\n\t\tthis.parseInitializer(node);\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"ClassPrivateProperty\");\n\t}\n\n\tparseClassProperty(node) {\n\t\tif (!node.typeAnnotation || this.match(types.eq)) {\n\t\t\tthis.expectPlugin(\"classProperties\");\n\t\t}\n\n\t\tthis.parseInitializer(node);\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"ClassProperty\");\n\t}\n\n\tparseInitializer(node) {\n\t\tthis.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\t\tthis.expressionScope.enter(newExpressionScope());\n\t\tthis.prodParam.enter(PARAM);\n\t\tnode.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n\t\tthis.expressionScope.exit();\n\t\tthis.prodParam.exit();\n\t\tthis.scope.exit();\n\t}\n\n\tparseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n\t\tif (this.match(types.name)) {\n\t\t\tnode.id = this.parseIdentifier();\n\n\t\t\tif (isStatement) {\n\t\t\t\tthis.checkLVal(node.id, \"class name\", bindingType);\n\t\t\t}\n\t\t} else {\n\t\t\tif (optionalId || !isStatement) {\n\t\t\t\tnode.id = null;\n\t\t\t} else {\n\t\t\t\tthis.unexpected(null, ErrorMessages.MissingClassName);\n\t\t\t}\n\t\t}\n\t}\n\n\tparseClassSuper(node) {\n\t\tnode.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n\t}\n\n\tparseExport(node) {\n\t\tconst hasDefault = this.maybeParseExportDefaultSpecifier(node);\n\t\tconst parseAfterDefault = !hasDefault || this.eat(types.comma);\n\t\tconst hasStar = parseAfterDefault && this.eatExportStar(node);\n\t\tconst hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n\t\tconst parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n\t\tconst isFromRequired = hasDefault || hasStar;\n\n\t\tif (hasStar && !hasNamespace) {\n\t\t\tif (hasDefault) this.unexpected();\n\t\t\tthis.parseExportFrom(node, true);\n\t\t\treturn this.finishNode(node, \"ExportAllDeclaration\");\n\t\t}\n\n\t\tconst hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n\t\tif (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n\t\t\tthrow this.unexpected(null, types.braceL);\n\t\t}\n\n\t\tlet hasDeclaration;\n\n\t\tif (isFromRequired || hasSpecifiers) {\n\t\t\thasDeclaration = false;\n\t\t\tthis.parseExportFrom(node, isFromRequired);\n\t\t} else {\n\t\t\thasDeclaration = this.maybeParseExportDeclaration(node);\n\t\t}\n\n\t\tif (isFromRequired || hasSpecifiers || hasDeclaration) {\n\t\t\tthis.checkExport(node, true, false, !!node.source);\n\t\t\treturn this.finishNode(node, \"ExportNamedDeclaration\");\n\t\t}\n\n\t\tif (this.eat(types._default)) {\n\t\t\tnode.declaration = this.parseExportDefaultExpression();\n\t\t\tthis.checkExport(node, true, true);\n\t\t\treturn this.finishNode(node, \"ExportDefaultDeclaration\");\n\t\t}\n\n\t\tthrow this.unexpected(null, types.braceL);\n\t}\n\n\teatExportStar(node) {\n\t\treturn this.eat(types.star);\n\t}\n\n\tmaybeParseExportDefaultSpecifier(node) {\n\t\tif (this.isExportDefaultSpecifier()) {\n\t\t\tthis.expectPlugin(\"exportDefaultFrom\");\n\t\t\tconst specifier = this.startNode();\n\t\t\tspecifier.exported = this.parseIdentifier(true);\n\t\t\tnode.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmaybeParseExportNamespaceSpecifier(node) {\n\t\tif (this.isContextual(\"as\")) {\n\t\t\tif (!node.specifiers) node.specifiers = [];\n\t\t\tconst specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n\t\t\tthis.next();\n\t\t\tspecifier.exported = this.parseModuleExportName();\n\t\t\tnode.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmaybeParseExportNamedSpecifiers(node) {\n\t\tif (this.match(types.braceL)) {\n\t\t\tif (!node.specifiers) node.specifiers = [];\n\t\t\tnode.specifiers.push(...this.parseExportSpecifiers());\n\t\t\tnode.source = null;\n\t\t\tnode.declaration = null;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmaybeParseExportDeclaration(node) {\n\t\tif (this.shouldParseExportDeclaration()) {\n\t\t\tnode.specifiers = [];\n\t\t\tnode.source = null;\n\t\t\tnode.declaration = this.parseExportDeclaration(node);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisAsyncFunction() {\n\t\tif (!this.isContextual(\"async\")) return false;\n\t\tconst next = this.nextTokenStart();\n\t\treturn !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n\t}\n\n\tparseExportDefaultExpression() {\n\t\tconst expr = this.startNode();\n\t\tconst isAsync = this.isAsyncFunction();\n\n\t\tif (this.match(types._function) || isAsync) {\n\t\t\tthis.next();\n\n\t\t\tif (isAsync) {\n\t\t\t\tthis.next();\n\t\t\t}\n\n\t\t\treturn this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n\t\t} else if (this.match(types._class)) {\n\t\t\treturn this.parseClass(expr, true, true);\n\t\t} else if (this.match(types.at)) {\n\t\t\tif (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n\t\t\t\tthis.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n\t\t\t}\n\n\t\t\tthis.parseDecorators(false);\n\t\t\treturn this.parseClass(expr, true, true);\n\t\t} else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n\t\t\tthrow this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n\t\t} else {\n\t\t\tconst res = this.parseMaybeAssignAllowIn();\n\t\t\tthis.semicolon();\n\t\t\treturn res;\n\t\t}\n\t}\n\n\tparseExportDeclaration(node) {\n\t\treturn this.parseStatement(null);\n\t}\n\n\tisExportDefaultSpecifier() {\n\t\tif (this.match(types.name)) {\n\t\t\tconst value = this.state.value;\n\n\t\t\tif (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n\t\t\t\tconst l = this.lookahead();\n\n\t\t\t\tif (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n\t\t\t\t\tthis.expectOnePlugin([\"flow\", \"typescript\"]);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.match(types._default)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst next = this.nextTokenStart();\n\t\tconst hasFrom = this.isUnparsedContextual(next, \"from\");\n\n\t\tif (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.match(types._default) && hasFrom) {\n\t\t\tconst nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n\t\t\treturn nextAfterFrom === 34 || nextAfterFrom === 39;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tparseExportFrom(node, expect) {\n\t\tif (this.eatContextual(\"from\")) {\n\t\t\tnode.source = this.parseImportSource();\n\t\t\tthis.checkExport(node);\n\t\t\tconst assertions = this.maybeParseImportAssertions();\n\n\t\t\tif (assertions) {\n\t\t\t\tnode.assertions = assertions;\n\t\t\t}\n\t\t} else {\n\t\t\tif (expect) {\n\t\t\t\tthis.unexpected();\n\t\t\t} else {\n\t\t\t\tnode.source = null;\n\t\t\t}\n\t\t}\n\n\t\tthis.semicolon();\n\t}\n\n\tshouldParseExportDeclaration() {\n\t\tif (this.match(types.at)) {\n\t\t\tthis.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n\t\t\tif (this.hasPlugin(\"decorators\")) {\n\t\t\t\tif (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n\t\t\t\t\tthis.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n\t}\n\n\tcheckExport(node, checkNames, isDefault, isFrom) {\n\t\tif (checkNames) {\n\t\t\tif (isDefault) {\n\t\t\t\tthis.checkDuplicateExports(node, \"default\");\n\n\t\t\t\tif (this.hasPlugin(\"exportDefaultFrom\")) {\n\t\t\t\t\tvar _declaration$extra;\n\n\t\t\t\t\tconst declaration = node.declaration;\n\n\t\t\t\t\tif (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n\t\t\t\t\t\tthis.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.specifiers && node.specifiers.length) {\n\t\t\t\tfor (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n\t\t\t\t\tconst specifier = _node$specifiers[_i3];\n\t\t\t\t\tconst {\n\t\t\t\t\t\texported\n\t\t\t\t\t} = specifier;\n\t\t\t\t\tconst exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n\t\t\t\t\tthis.checkDuplicateExports(specifier, exportedName);\n\n\t\t\t\t\tif (!isFrom && specifier.local) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tlocal\n\t\t\t\t\t\t} = specifier;\n\n\t\t\t\t\t\tif (local.type === \"StringLiteral\") {\n\t\t\t\t\t\t\tthis.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.checkReservedWord(local.name, local.start, true, false);\n\t\t\t\t\t\t\tthis.scope.checkLocalExport(local);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.declaration) {\n\t\t\t\tif (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n\t\t\t\t\tconst id = node.declaration.id;\n\t\t\t\t\tif (!id) throw new Error(\"Assertion failure\");\n\t\t\t\t\tthis.checkDuplicateExports(node, id.name);\n\t\t\t\t} else if (node.declaration.type === \"VariableDeclaration\") {\n\t\t\t\t\tfor (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n\t\t\t\t\t\tconst declaration = _node$declaration$dec[_i4];\n\t\t\t\t\t\tthis.checkDeclaration(declaration.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n\t\tif (currentContextDecorators.length) {\n\t\t\tthrow this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n\t\t}\n\t}\n\n\tcheckDeclaration(node) {\n\t\tif (node.type === \"Identifier\") {\n\t\t\tthis.checkDuplicateExports(node, node.name);\n\t\t} else if (node.type === \"ObjectPattern\") {\n\t\t\tfor (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n\t\t\t\tconst prop = _node$properties[_i5];\n\t\t\t\tthis.checkDeclaration(prop);\n\t\t\t}\n\t\t} else if (node.type === \"ArrayPattern\") {\n\t\t\tfor (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n\t\t\t\tconst elem = _node$elements[_i6];\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.checkDeclaration(elem);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (node.type === \"ObjectProperty\") {\n\t\t\tthis.checkDeclaration(node.value);\n\t\t} else if (node.type === \"RestElement\") {\n\t\t\tthis.checkDeclaration(node.argument);\n\t\t} else if (node.type === \"AssignmentPattern\") {\n\t\t\tthis.checkDeclaration(node.left);\n\t\t}\n\t}\n\n\tcheckDuplicateExports(node, name) {\n\t\tif (this.state.exportedIdentifiers.indexOf(name) > -1) {\n\t\t\tthis.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n\t\t}\n\n\t\tthis.state.exportedIdentifiers.push(name);\n\t}\n\n\tparseExportSpecifiers() {\n\t\tconst nodes = [];\n\t\tlet first = true;\n\t\tthis.expect(types.braceL);\n\n\t\twhile (!this.eat(types.braceR)) {\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tthis.expect(types.comma);\n\t\t\t\tif (this.eat(types.braceR)) break;\n\t\t\t}\n\n\t\t\tconst node = this.startNode();\n\t\t\tnode.local = this.parseModuleExportName();\n\t\t\tnode.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n\t\t\tnodes.push(this.finishNode(node, \"ExportSpecifier\"));\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\tparseModuleExportName() {\n\t\tif (this.match(types.string)) {\n\t\t\tthis.expectPlugin(\"moduleStringNames\");\n\t\t\tconst result = this.parseLiteral(this.state.value, \"StringLiteral\");\n\t\t\tconst surrogate = result.value.match(loneSurrogate);\n\n\t\t\tif (surrogate) {\n\t\t\t\tthis.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.parseIdentifier(true);\n\t}\n\n\tparseImport(node) {\n\t\tnode.specifiers = [];\n\n\t\tif (!this.match(types.string)) {\n\t\t\tconst hasDefault = this.maybeParseDefaultImportSpecifier(node);\n\t\t\tconst parseNext = !hasDefault || this.eat(types.comma);\n\t\t\tconst hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n\t\t\tif (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n\t\t\tthis.expectContextual(\"from\");\n\t\t}\n\n\t\tnode.source = this.parseImportSource();\n\t\tconst assertions = this.maybeParseImportAssertions();\n\n\t\tif (assertions) {\n\t\t\tnode.assertions = assertions;\n\t\t} else {\n\t\t\t\tconst attributes = this.maybeParseModuleAttributes();\n\n\t\t\t\tif (attributes) {\n\t\t\t\t\tnode.attributes = attributes;\n\t\t\t\t}\n\t\t\t}\n\n\t\tthis.semicolon();\n\t\treturn this.finishNode(node, \"ImportDeclaration\");\n\t}\n\n\tparseImportSource() {\n\t\tif (!this.match(types.string)) this.unexpected();\n\t\treturn this.parseExprAtom();\n\t}\n\n\tshouldParseDefaultImport(node) {\n\t\treturn this.match(types.name);\n\t}\n\n\tparseImportSpecifierLocal(node, specifier, type, contextDescription) {\n\t\tspecifier.local = this.parseIdentifier();\n\t\tthis.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n\t\tnode.specifiers.push(this.finishNode(specifier, type));\n\t}\n\n\tparseAssertEntries() {\n\t\tconst attrs = [];\n\t\tconst attrNames = new Set();\n\n\t\tdo {\n\t\t\tif (this.match(types.braceR)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst node = this.startNode();\n\t\t\tconst keyName = this.state.value;\n\n\t\t\tif (this.match(types.string)) {\n\t\t\t\tnode.key = this.parseLiteral(keyName, \"StringLiteral\");\n\t\t\t} else {\n\t\t\t\tnode.key = this.parseIdentifier(true);\n\t\t\t}\n\n\t\t\tthis.expect(types.colon);\n\n\t\t\tif (keyName !== \"type\") {\n\t\t\t\tthis.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n\t\t\t}\n\n\t\t\tif (attrNames.has(keyName)) {\n\t\t\t\tthis.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n\t\t\t}\n\n\t\t\tattrNames.add(keyName);\n\n\t\t\tif (!this.match(types.string)) {\n\t\t\t\tthrow this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n\t\t\t}\n\n\t\t\tnode.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n\t\t\tthis.finishNode(node, \"ImportAttribute\");\n\t\t\tattrs.push(node);\n\t\t} while (this.eat(types.comma));\n\n\t\treturn attrs;\n\t}\n\n\tmaybeParseModuleAttributes() {\n\t\tif (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n\t\t\tthis.expectPlugin(\"moduleAttributes\");\n\t\t\tthis.next();\n\t\t} else {\n\t\t\tif (this.hasPlugin(\"moduleAttributes\")) return [];\n\t\t\treturn null;\n\t\t}\n\n\t\tconst attrs = [];\n\t\tconst attributes = new Set();\n\n\t\tdo {\n\t\t\tconst node = this.startNode();\n\t\t\tnode.key = this.parseIdentifier(true);\n\n\t\t\tif (node.key.name !== \"type\") {\n\t\t\t\tthis.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n\t\t\t}\n\n\t\t\tif (attributes.has(node.key.name)) {\n\t\t\t\tthis.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n\t\t\t}\n\n\t\t\tattributes.add(node.key.name);\n\t\t\tthis.expect(types.colon);\n\n\t\t\tif (!this.match(types.string)) {\n\t\t\t\tthrow this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n\t\t\t}\n\n\t\t\tnode.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n\t\t\tthis.finishNode(node, \"ImportAttribute\");\n\t\t\tattrs.push(node);\n\t\t} while (this.eat(types.comma));\n\n\t\treturn attrs;\n\t}\n\n\tmaybeParseImportAssertions() {\n\t\tif (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n\t\t\tthis.expectPlugin(\"importAssertions\");\n\t\t\tthis.next();\n\t\t} else {\n\t\t\tif (this.hasPlugin(\"importAssertions\")) return [];\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.eat(types.braceL);\n\t\tconst attrs = this.parseAssertEntries();\n\t\tthis.eat(types.braceR);\n\t\treturn attrs;\n\t}\n\n\tmaybeParseDefaultImportSpecifier(node) {\n\t\tif (this.shouldParseDefaultImport(node)) {\n\t\t\tthis.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmaybeParseStarImportSpecifier(node) {\n\t\tif (this.match(types.star)) {\n\t\t\tconst specifier = this.startNode();\n\t\t\tthis.next();\n\t\t\tthis.expectContextual(\"as\");\n\t\t\tthis.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tparseNamedImportSpecifiers(node) {\n\t\tlet first = true;\n\t\tthis.expect(types.braceL);\n\n\t\twhile (!this.eat(types.braceR)) {\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tif (this.eat(types.colon)) {\n\t\t\t\t\tthrow this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n\t\t\t\t}\n\n\t\t\t\tthis.expect(types.comma);\n\t\t\t\tif (this.eat(types.braceR)) break;\n\t\t\t}\n\n\t\t\tthis.parseImportSpecifier(node);\n\t\t}\n\t}\n\n\tparseImportSpecifier(node) {\n\t\tconst specifier = this.startNode();\n\t\tspecifier.imported = this.parseModuleExportName();\n\n\t\tif (this.eatContextual(\"as\")) {\n\t\t\tspecifier.local = this.parseIdentifier();\n\t\t} else {\n\t\t\tconst {\n\t\t\t\timported\n\t\t\t} = specifier;\n\n\t\t\tif (imported.type === \"StringLiteral\") {\n\t\t\t\tthrow this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n\t\t\t}\n\n\t\t\tthis.checkReservedWord(imported.name, specifier.start, true, true);\n\t\t\tspecifier.local = imported.__clone();\n\t\t}\n\n\t\tthis.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n\t\tnode.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n\t}\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Parameter.js",["605","606"],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/ExpressionParser.js",["607","608","609","610","611","612","613","614","615","616","617","618","619","620"],"import LValParser from './LValParser.js'\nimport ErrorMessages from '../ErrorMessages.js'\nimport { isStrictReservedWord, isStrictBindReservedWord, isReservedWord, isKeyword, PARAM , PARAM_AWAIT, SCOPE_PROGRAM , newAsyncArrowScope ,isIdentifierStart, functionFlags, newArrowHeadScope, SCOPE_FUNCTION, SCOPE_SUPER, SCOPE_CLASS, SCOPE_DIRECT_SUPER, SCOPE_ARROW, PARAM_IN, newExpressionScope, PARAM_RETURN, BIND_OUTSIDE, BIND_VAR} from '../Parameter.js'\nimport types from '../types.js'\nimport types$1 from '../types$1.js'\nimport ExpressionErrors from '../ExpressionErrors.js'\nimport ExpressionScope from '../ExpressionScope.js'\n\nexport default class ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (this.isPrivateName(property)) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.getPrivateNameSV(property), property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (!this.isPrivateName(prop.key)) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (let _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n      const param = _node$params[_i2];\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/LValParser.js",["621","622"],"import NodeUtils from './NodeUtils.js'\nimport { unwrapParenthesizedExpression, BIND_NONE, isStrictBindReservedWord, isStrictBindOnlyReservedWord } from '../Parameter.js'\nimport ErrorMessages from '../ErrorMessages.js'\nimport types from '../types.js'\n\nexport default class LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ErrorMessages.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/types.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionErrors.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ExpressionScope.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ArrowHeadParsingScope.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/types$1.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/NodeUtils.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/UtilParser.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/Tokenizer.js",["623","624","625","626","627","628","629","630","631","632","633","634","635","636","637"],"import ParserError from './ParserError.js'\nimport types from '../types.js'\nimport types$1 from '../types$1.js'\nimport { Token, _isDigit, forbiddenNumericSeparatorSiblings, VALID_REGEX_FLAGS, lineBreak, allowedNumericSeparatorSiblings, keywords, isIdentifierChar, isIdentifierStart, isWhitespace, skipWhiteSpace , SourceLocation, lineBreakG, isNewLine } from '../Parameter.js'\nimport ErrorMessages from '../ErrorMessages.js'\n\nexport default class Tokenizer extends ParserError {\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/ParserError.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/extends/CommentsParser.js",["638","639","640","641","642"],"import { last } from '../Parameter.js'\n\nexport default class CommentsParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}","/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/TokenType.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/TokContext.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Node.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/Scope.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ClassScopeHandler.js",[],"/Users/wangxinbo/Desktop/codeParse/react-project/src/Test/Js2flowchart/builder/BabelParserCopy/ClassScope.js",[],{"ruleId":"643","replacedBy":"644"},{"ruleId":"645","replacedBy":"646"},{"ruleId":"643","replacedBy":"647"},{"ruleId":"645","replacedBy":"648"},{"ruleId":"649","severity":1,"message":"650","line":827,"column":7,"nodeType":"651","messageId":"652","endLine":827,"endColumn":12},{"ruleId":"649","severity":1,"message":"653","line":847,"column":7,"nodeType":"651","messageId":"652","endLine":847,"endColumn":12},{"ruleId":"649","severity":1,"message":"654","line":859,"column":7,"nodeType":"651","messageId":"652","endLine":859,"endColumn":12},{"ruleId":"649","severity":1,"message":"655","line":870,"column":7,"nodeType":"651","messageId":"652","endLine":870,"endColumn":12},{"ruleId":"649","severity":1,"message":"656","line":899,"column":7,"nodeType":"651","messageId":"652","endLine":899,"endColumn":12},{"ruleId":"649","severity":1,"message":"657","line":914,"column":7,"nodeType":"651","messageId":"652","endLine":914,"endColumn":12},{"ruleId":"649","severity":1,"message":"658","line":932,"column":7,"nodeType":"651","messageId":"652","endLine":932,"endColumn":12},{"ruleId":"649","severity":1,"message":"659","line":945,"column":7,"nodeType":"651","messageId":"652","endLine":945,"endColumn":12},{"ruleId":"649","severity":1,"message":"660","line":1142,"column":7,"nodeType":"651","messageId":"652","endLine":1142,"endColumn":12},{"ruleId":"649","severity":1,"message":"661","line":1155,"column":7,"nodeType":"651","messageId":"652","endLine":1155,"endColumn":13},{"ruleId":"649","severity":1,"message":"662","line":1,"column":13,"nodeType":"651","messageId":"652","endLine":1,"endColumn":24},{"ruleId":"663","severity":1,"message":"664","line":1,"column":1,"nodeType":"665","messageId":"666","endLine":1,"endColumn":14,"fix":"667"},{"ruleId":"668","severity":1,"message":"669","line":482,"column":7,"nodeType":"670","messageId":"671","endLine":502,"endColumn":8},{"ruleId":"672","severity":1,"message":"673","line":503,"column":109,"nodeType":"674","messageId":"675","endLine":503,"endColumn":111},{"ruleId":"672","severity":1,"message":"673","line":503,"column":144,"nodeType":"674","messageId":"675","endLine":503,"endColumn":146},{"ruleId":"672","severity":1,"message":"676","line":503,"column":144,"nodeType":"674","messageId":"675","endLine":503,"endColumn":146},{"ruleId":"672","severity":1,"message":"676","line":503,"column":205,"nodeType":"674","messageId":"675","endLine":503,"endColumn":207},{"ruleId":"668","severity":1,"message":"669","line":982,"column":5,"nodeType":"670","messageId":"671","endLine":995,"endColumn":6},{"ruleId":"672","severity":1,"message":"673","line":1198,"column":19,"nodeType":"674","messageId":"675","endLine":1198,"endColumn":21},{"ruleId":"672","severity":1,"message":"673","line":1198,"column":39,"nodeType":"674","messageId":"675","endLine":1198,"endColumn":41},{"ruleId":"672","severity":1,"message":"676","line":1305,"column":61,"nodeType":"674","messageId":"675","endLine":1305,"endColumn":63},{"ruleId":"672","severity":1,"message":"676","line":1305,"column":112,"nodeType":"674","messageId":"675","endLine":1305,"endColumn":114},{"ruleId":"672","severity":1,"message":"676","line":1305,"column":141,"nodeType":"674","messageId":"675","endLine":1305,"endColumn":143},{"ruleId":"672","severity":1,"message":"676","line":1305,"column":189,"nodeType":"674","messageId":"675","endLine":1305,"endColumn":191},{"ruleId":"672","severity":1,"message":"676","line":1575,"column":54,"nodeType":"674","messageId":"675","endLine":1575,"endColumn":56},{"ruleId":"672","severity":1,"message":"676","line":1575,"column":119,"nodeType":"674","messageId":"675","endLine":1575,"endColumn":121},{"ruleId":"672","severity":1,"message":"676","line":2370,"column":76,"nodeType":"674","messageId":"675","endLine":2370,"endColumn":78},{"ruleId":"672","severity":1,"message":"676","line":2370,"column":104,"nodeType":"674","messageId":"675","endLine":2370,"endColumn":106},{"ruleId":"672","severity":1,"message":"676","line":2647,"column":105,"nodeType":"674","messageId":"675","endLine":2647,"endColumn":107},{"ruleId":"672","severity":1,"message":"676","line":2647,"column":132,"nodeType":"674","messageId":"675","endLine":2647,"endColumn":134},{"ruleId":"672","severity":1,"message":"676","line":2651,"column":135,"nodeType":"674","messageId":"675","endLine":2651,"endColumn":137},{"ruleId":"672","severity":1,"message":"676","line":2651,"column":162,"nodeType":"674","messageId":"675","endLine":2651,"endColumn":164},{"ruleId":"672","severity":1,"message":"673","line":2816,"column":45,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":47},{"ruleId":"672","severity":1,"message":"673","line":2816,"column":109,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":111},{"ruleId":"672","severity":1,"message":"676","line":2816,"column":109,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":111},{"ruleId":"672","severity":1,"message":"676","line":2816,"column":151,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":153},{"ruleId":"672","severity":1,"message":"676","line":2816,"column":181,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":183},{"ruleId":"672","severity":1,"message":"676","line":2816,"column":221,"nodeType":"674","messageId":"675","endLine":2816,"endColumn":223},{"ruleId":"668","severity":1,"message":"669","line":3823,"column":9,"nodeType":"670","messageId":"671","endLine":3868,"endColumn":10},{"ruleId":"677","severity":1,"message":"678","line":4063,"column":4,"nodeType":"679","messageId":"680","endLine":4063,"endColumn":5},{"ruleId":"672","severity":1,"message":"673","line":4354,"column":30,"nodeType":"674","messageId":"675","endLine":4354,"endColumn":32},{"ruleId":"672","severity":1,"message":"673","line":4354,"column":58,"nodeType":"674","messageId":"675","endLine":4354,"endColumn":60},{"ruleId":"672","severity":1,"message":"676","line":4878,"column":44,"nodeType":"674","messageId":"675","endLine":4878,"endColumn":46},{"ruleId":"672","severity":1,"message":"676","line":4878,"column":62,"nodeType":"674","messageId":"675","endLine":4878,"endColumn":64},{"ruleId":"672","severity":1,"message":"676","line":4931,"column":47,"nodeType":"674","messageId":"675","endLine":4931,"endColumn":49},{"ruleId":"672","severity":1,"message":"676","line":4931,"column":90,"nodeType":"674","messageId":"675","endLine":4931,"endColumn":92},{"ruleId":"672","severity":1,"message":"673","line":4934,"column":45,"nodeType":"674","messageId":"675","endLine":4934,"endColumn":47},{"ruleId":"672","severity":1,"message":"673","line":4934,"column":113,"nodeType":"674","messageId":"675","endLine":4934,"endColumn":115},{"ruleId":"672","severity":1,"message":"676","line":4934,"column":113,"nodeType":"674","messageId":"675","endLine":4934,"endColumn":115},{"ruleId":"672","severity":1,"message":"676","line":4934,"column":156,"nodeType":"674","messageId":"675","endLine":4934,"endColumn":158},{"ruleId":"668","severity":1,"message":"669","line":5212,"column":5,"nodeType":"670","messageId":"671","endLine":5225,"endColumn":6},{"ruleId":"672","severity":1,"message":"676","line":5613,"column":49,"nodeType":"674","messageId":"675","endLine":5613,"endColumn":51},{"ruleId":"672","severity":1,"message":"676","line":5613,"column":82,"nodeType":"674","messageId":"675","endLine":5613,"endColumn":84},{"ruleId":"668","severity":1,"message":"669","line":5729,"column":5,"nodeType":"670","messageId":"671","endLine":5787,"endColumn":6},{"ruleId":"668","severity":1,"message":"669","line":6332,"column":7,"nodeType":"670","messageId":"671","endLine":6362,"endColumn":8},{"ruleId":"681","severity":1,"message":"682","line":6348,"column":9,"nodeType":"683","messageId":"684","endLine":6350,"endColumn":53},{"ruleId":"668","severity":1,"message":"669","line":6405,"column":5,"nodeType":"670","messageId":"671","endLine":6466,"endColumn":6},{"ruleId":"668","severity":1,"message":"669","line":6515,"column":7,"nodeType":"670","messageId":"671","endLine":6524,"endColumn":8},{"ruleId":"672","severity":1,"message":"676","line":7082,"column":51,"nodeType":"674","messageId":"675","endLine":7082,"endColumn":53},{"ruleId":"672","severity":1,"message":"676","line":7082,"column":65,"nodeType":"674","messageId":"675","endLine":7082,"endColumn":67},{"ruleId":"668","severity":1,"message":"669","line":7271,"column":7,"nodeType":"670","messageId":"671","endLine":7285,"endColumn":8},{"ruleId":"672","severity":1,"message":"676","line":7416,"column":37,"nodeType":"674","messageId":"675","endLine":7416,"endColumn":39},{"ruleId":"672","severity":1,"message":"676","line":7416,"column":51,"nodeType":"674","messageId":"675","endLine":7416,"endColumn":53},{"ruleId":"685","severity":1,"message":"686","line":7615,"column":93,"nodeType":"687","messageId":"688","endLine":7615,"endColumn":94},{"ruleId":"685","severity":1,"message":"686","line":7615,"column":155,"nodeType":"687","messageId":"688","endLine":7615,"endColumn":156},{"ruleId":"685","severity":1,"message":"686","line":7615,"column":224,"nodeType":"687","messageId":"688","endLine":7615,"endColumn":225},{"ruleId":"685","severity":1,"message":"686","line":7641,"column":84,"nodeType":"687","messageId":"688","endLine":7641,"endColumn":85},{"ruleId":"685","severity":1,"message":"686","line":7641,"column":143,"nodeType":"687","messageId":"688","endLine":7641,"endColumn":144},{"ruleId":"681","severity":1,"message":"682","line":7955,"column":9,"nodeType":"683","messageId":"684","endLine":7955,"endColumn":17},{"ruleId":"672","severity":1,"message":"676","line":8011,"column":22,"nodeType":"674","messageId":"675","endLine":8011,"endColumn":24},{"ruleId":"672","severity":1,"message":"676","line":8011,"column":37,"nodeType":"674","messageId":"675","endLine":8011,"endColumn":39},{"ruleId":"681","severity":1,"message":"682","line":8348,"column":7,"nodeType":"683","messageId":"684","endLine":8348,"endColumn":15},{"ruleId":"672","severity":1,"message":"676","line":8547,"column":34,"nodeType":"674","messageId":"675","endLine":8547,"endColumn":36},{"ruleId":"672","severity":1,"message":"676","line":8547,"column":49,"nodeType":"674","messageId":"675","endLine":8547,"endColumn":51},{"ruleId":"672","severity":1,"message":"676","line":8746,"column":21,"nodeType":"674","messageId":"675","endLine":8746,"endColumn":23},{"ruleId":"672","severity":1,"message":"676","line":8746,"column":34,"nodeType":"674","messageId":"675","endLine":8746,"endColumn":36},{"ruleId":"681","severity":1,"message":"682","line":8785,"column":11,"nodeType":"683","messageId":"684","endLine":8787,"endColumn":19},{"ruleId":"681","severity":1,"message":"682","line":8852,"column":7,"nodeType":"683","messageId":"684","endLine":8854,"endColumn":30},{"ruleId":"681","severity":1,"message":"682","line":8856,"column":7,"nodeType":"683","messageId":"684","endLine":8856,"endColumn":17},{"ruleId":"681","severity":1,"message":"689","line":8868,"column":7,"nodeType":"683","messageId":"690","endLine":8894,"endColumn":40},{"ruleId":"672","severity":1,"message":"676","line":8991,"column":36,"nodeType":"674","messageId":"675","endLine":8991,"endColumn":38},{"ruleId":"672","severity":1,"message":"676","line":8991,"column":63,"nodeType":"674","messageId":"675","endLine":8991,"endColumn":65},{"ruleId":"691","severity":1,"message":"692","line":9020,"column":16,"nodeType":"693","messageId":"694","endLine":9020,"endColumn":43},{"ruleId":"668","severity":1,"message":"669","line":9339,"column":5,"nodeType":"670","messageId":"671","endLine":9394,"endColumn":6},{"ruleId":"668","severity":1,"message":"669","line":9482,"column":5,"nodeType":"670","messageId":"671","endLine":9493,"endColumn":6},{"ruleId":"672","severity":1,"message":"673","line":10043,"column":22,"nodeType":"674","messageId":"675","endLine":10043,"endColumn":24},{"ruleId":"672","severity":1,"message":"673","line":10043,"column":85,"nodeType":"674","messageId":"675","endLine":10043,"endColumn":87},{"ruleId":"672","severity":1,"message":"676","line":10043,"column":85,"nodeType":"674","messageId":"675","endLine":10043,"endColumn":87},{"ruleId":"672","severity":1,"message":"676","line":10043,"column":96,"nodeType":"674","messageId":"675","endLine":10043,"endColumn":98},{"ruleId":"668","severity":1,"message":"669","line":10060,"column":9,"nodeType":"670","messageId":"671","endLine":10070,"endColumn":10},{"ruleId":"681","severity":1,"message":"689","line":10072,"column":7,"nodeType":"683","messageId":"690","endLine":10073,"endColumn":56},{"ruleId":"681","severity":1,"message":"682","line":10500,"column":7,"nodeType":"683","messageId":"684","endLine":10503,"endColumn":45},{"ruleId":"681","severity":1,"message":"682","line":10563,"column":7,"nodeType":"683","messageId":"684","endLine":10572,"endColumn":10},{"ruleId":"681","severity":1,"message":"689","line":10574,"column":7,"nodeType":"683","messageId":"690","endLine":10575,"endColumn":33},{"ruleId":"672","severity":1,"message":"676","line":11413,"column":213,"nodeType":"674","messageId":"675","endLine":11413,"endColumn":215},{"ruleId":"672","severity":1,"message":"676","line":11413,"column":246,"nodeType":"674","messageId":"675","endLine":11413,"endColumn":248},{"ruleId":"672","severity":1,"message":"676","line":11432,"column":32,"nodeType":"674","messageId":"675","endLine":11432,"endColumn":34},{"ruleId":"672","severity":1,"message":"676","line":11432,"column":59,"nodeType":"674","messageId":"675","endLine":11432,"endColumn":61},{"ruleId":"681","severity":1,"message":"682","line":11766,"column":7,"nodeType":"683","messageId":"684","endLine":11791,"endColumn":10},{"ruleId":"672","severity":1,"message":"673","line":11784,"column":58,"nodeType":"674","messageId":"675","endLine":11784,"endColumn":60},{"ruleId":"672","severity":1,"message":"673","line":11784,"column":115,"nodeType":"674","messageId":"675","endLine":11784,"endColumn":117},{"ruleId":"672","severity":1,"message":"676","line":11784,"column":115,"nodeType":"674","messageId":"675","endLine":11784,"endColumn":117},{"ruleId":"672","severity":1,"message":"676","line":11784,"column":157,"nodeType":"674","messageId":"675","endLine":11784,"endColumn":159},{"ruleId":"672","severity":1,"message":"673","line":12776,"column":53,"nodeType":"674","messageId":"675","endLine":12776,"endColumn":55},{"ruleId":"672","severity":1,"message":"673","line":12776,"column":71,"nodeType":"674","messageId":"675","endLine":12776,"endColumn":73},{"ruleId":"672","severity":1,"message":"676","line":12776,"column":71,"nodeType":"674","messageId":"675","endLine":12776,"endColumn":73},{"ruleId":"672","severity":1,"message":"676","line":12776,"column":110,"nodeType":"674","messageId":"675","endLine":12776,"endColumn":112},{"ruleId":"672","severity":1,"message":"673","line":12899,"column":29,"nodeType":"674","messageId":"675","endLine":12899,"endColumn":31},{"ruleId":"672","severity":1,"message":"673","line":12899,"column":56,"nodeType":"674","messageId":"675","endLine":12899,"endColumn":58},{"ruleId":"672","severity":1,"message":"673","line":12906,"column":35,"nodeType":"674","messageId":"675","endLine":12906,"endColumn":37},{"ruleId":"672","severity":1,"message":"673","line":12906,"column":57,"nodeType":"674","messageId":"675","endLine":12906,"endColumn":59},{"ruleId":"672","severity":1,"message":"676","line":12918,"column":44,"nodeType":"674","messageId":"675","endLine":12918,"endColumn":46},{"ruleId":"672","severity":1,"message":"676","line":12918,"column":70,"nodeType":"674","messageId":"675","endLine":12918,"endColumn":72},{"ruleId":"649","severity":1,"message":"695","line":13435,"column":10,"nodeType":"651","messageId":"652","endLine":13435,"endColumn":15},{"ruleId":"649","severity":1,"message":"696","line":13472,"column":10,"nodeType":"651","messageId":"652","endLine":13472,"endColumn":25},{"ruleId":"649","severity":1,"message":"697","line":7,"column":17,"nodeType":"651","messageId":"652","endLine":7,"endColumn":28},{"ruleId":"672","severity":1,"message":"676","line":51,"column":44,"nodeType":"674","messageId":"675","endLine":51,"endColumn":46},{"ruleId":"672","severity":1,"message":"676","line":51,"column":62,"nodeType":"674","messageId":"675","endLine":51,"endColumn":64},{"ruleId":"672","severity":1,"message":"676","line":104,"column":47,"nodeType":"674","messageId":"675","endLine":104,"endColumn":49},{"ruleId":"672","severity":1,"message":"676","line":104,"column":90,"nodeType":"674","messageId":"675","endLine":104,"endColumn":92},{"ruleId":"672","severity":1,"message":"673","line":107,"column":45,"nodeType":"674","messageId":"675","endLine":107,"endColumn":47},{"ruleId":"672","severity":1,"message":"673","line":107,"column":113,"nodeType":"674","messageId":"675","endLine":107,"endColumn":115},{"ruleId":"672","severity":1,"message":"676","line":107,"column":113,"nodeType":"674","messageId":"675","endLine":107,"endColumn":115},{"ruleId":"672","severity":1,"message":"676","line":107,"column":156,"nodeType":"674","messageId":"675","endLine":107,"endColumn":158},{"ruleId":"681","severity":1,"message":"682","line":170,"column":7,"nodeType":"683","messageId":"684","endLine":195,"endColumn":10},{"ruleId":"672","severity":1,"message":"673","line":188,"column":58,"nodeType":"674","messageId":"675","endLine":188,"endColumn":60},{"ruleId":"672","severity":1,"message":"673","line":188,"column":115,"nodeType":"674","messageId":"675","endLine":188,"endColumn":117},{"ruleId":"672","severity":1,"message":"676","line":188,"column":115,"nodeType":"674","messageId":"675","endLine":188,"endColumn":117},{"ruleId":"672","severity":1,"message":"676","line":188,"column":157,"nodeType":"674","messageId":"675","endLine":188,"endColumn":159},{"ruleId":"672","severity":1,"message":"673","line":1180,"column":53,"nodeType":"674","messageId":"675","endLine":1180,"endColumn":55},{"ruleId":"672","severity":1,"message":"673","line":1180,"column":71,"nodeType":"674","messageId":"675","endLine":1180,"endColumn":73},{"ruleId":"672","severity":1,"message":"676","line":1180,"column":71,"nodeType":"674","messageId":"675","endLine":1180,"endColumn":73},{"ruleId":"672","severity":1,"message":"676","line":1180,"column":110,"nodeType":"674","messageId":"675","endLine":1180,"endColumn":112},{"ruleId":"672","severity":1,"message":"673","line":1303,"column":29,"nodeType":"674","messageId":"675","endLine":1303,"endColumn":31},{"ruleId":"672","severity":1,"message":"673","line":1303,"column":56,"nodeType":"674","messageId":"675","endLine":1303,"endColumn":58},{"ruleId":"672","severity":1,"message":"673","line":1310,"column":35,"nodeType":"674","messageId":"675","endLine":1310,"endColumn":37},{"ruleId":"672","severity":1,"message":"673","line":1310,"column":57,"nodeType":"674","messageId":"675","endLine":1310,"endColumn":59},{"ruleId":"672","severity":1,"message":"676","line":1322,"column":44,"nodeType":"674","messageId":"675","endLine":1322,"endColumn":46},{"ruleId":"672","severity":1,"message":"676","line":1322,"column":70,"nodeType":"674","messageId":"675","endLine":1322,"endColumn":72},{"ruleId":"681","severity":1,"message":"682","line":283,"column":4,"nodeType":"683","messageId":"684","endLine":308,"endColumn":6},{"ruleId":"672","severity":1,"message":"673","line":301,"column":52,"nodeType":"674","messageId":"675","endLine":301,"endColumn":54},{"ruleId":"672","severity":1,"message":"673","line":301,"column":109,"nodeType":"674","messageId":"675","endLine":301,"endColumn":111},{"ruleId":"672","severity":1,"message":"676","line":301,"column":109,"nodeType":"674","messageId":"675","endLine":301,"endColumn":111},{"ruleId":"672","severity":1,"message":"676","line":301,"column":151,"nodeType":"674","messageId":"675","endLine":301,"endColumn":153},{"ruleId":"672","severity":1,"message":"673","line":1293,"column":51,"nodeType":"674","messageId":"675","endLine":1293,"endColumn":53},{"ruleId":"672","severity":1,"message":"673","line":1293,"column":69,"nodeType":"674","messageId":"675","endLine":1293,"endColumn":71},{"ruleId":"672","severity":1,"message":"676","line":1293,"column":69,"nodeType":"674","messageId":"675","endLine":1293,"endColumn":71},{"ruleId":"672","severity":1,"message":"676","line":1293,"column":108,"nodeType":"674","messageId":"675","endLine":1293,"endColumn":110},{"ruleId":"672","severity":1,"message":"673","line":1416,"column":26,"nodeType":"674","messageId":"675","endLine":1416,"endColumn":28},{"ruleId":"672","severity":1,"message":"673","line":1416,"column":53,"nodeType":"674","messageId":"675","endLine":1416,"endColumn":55},{"ruleId":"672","severity":1,"message":"673","line":1423,"column":31,"nodeType":"674","messageId":"675","endLine":1423,"endColumn":33},{"ruleId":"672","severity":1,"message":"673","line":1423,"column":53,"nodeType":"674","messageId":"675","endLine":1423,"endColumn":55},{"ruleId":"672","severity":1,"message":"676","line":1435,"column":42,"nodeType":"674","messageId":"675","endLine":1435,"endColumn":44},{"ruleId":"672","severity":1,"message":"676","line":1435,"column":68,"nodeType":"674","messageId":"675","endLine":1435,"endColumn":70},{"ruleId":"672","severity":1,"message":"673","line":135,"column":19,"nodeType":"674","messageId":"675","endLine":135,"endColumn":21},{"ruleId":"672","severity":1,"message":"673","line":135,"column":39,"nodeType":"674","messageId":"675","endLine":135,"endColumn":41},{"ruleId":"649","severity":1,"message":"698","line":7,"column":8,"nodeType":"651","messageId":"652","endLine":7,"endColumn":23},{"ruleId":"672","severity":1,"message":"673","line":246,"column":22,"nodeType":"674","messageId":"675","endLine":246,"endColumn":24},{"ruleId":"672","severity":1,"message":"673","line":246,"column":85,"nodeType":"674","messageId":"675","endLine":246,"endColumn":87},{"ruleId":"672","severity":1,"message":"676","line":246,"column":85,"nodeType":"674","messageId":"675","endLine":246,"endColumn":87},{"ruleId":"672","severity":1,"message":"676","line":246,"column":96,"nodeType":"674","messageId":"675","endLine":246,"endColumn":98},{"ruleId":"668","severity":1,"message":"669","line":263,"column":9,"nodeType":"670","messageId":"671","endLine":273,"endColumn":10},{"ruleId":"681","severity":1,"message":"689","line":275,"column":7,"nodeType":"683","messageId":"690","endLine":276,"endColumn":56},{"ruleId":"681","severity":1,"message":"682","line":703,"column":7,"nodeType":"683","messageId":"684","endLine":706,"endColumn":45},{"ruleId":"681","severity":1,"message":"682","line":766,"column":7,"nodeType":"683","messageId":"684","endLine":775,"endColumn":10},{"ruleId":"681","severity":1,"message":"689","line":777,"column":7,"nodeType":"683","messageId":"690","endLine":778,"endColumn":33},{"ruleId":"672","severity":1,"message":"676","line":1616,"column":213,"nodeType":"674","messageId":"675","endLine":1616,"endColumn":215},{"ruleId":"672","severity":1,"message":"676","line":1616,"column":246,"nodeType":"674","messageId":"675","endLine":1616,"endColumn":248},{"ruleId":"672","severity":1,"message":"676","line":1635,"column":32,"nodeType":"674","messageId":"675","endLine":1635,"endColumn":34},{"ruleId":"672","severity":1,"message":"676","line":1635,"column":59,"nodeType":"674","messageId":"675","endLine":1635,"endColumn":61},{"ruleId":"668","severity":1,"message":"669","line":26,"column":5,"nodeType":"670","messageId":"671","endLine":81,"endColumn":6},{"ruleId":"668","severity":1,"message":"669","line":169,"column":5,"nodeType":"670","messageId":"671","endLine":180,"endColumn":6},{"ruleId":"681","severity":1,"message":"682","line":164,"column":9,"nodeType":"683","messageId":"684","endLine":164,"endColumn":17},{"ruleId":"672","severity":1,"message":"676","line":220,"column":22,"nodeType":"674","messageId":"675","endLine":220,"endColumn":24},{"ruleId":"672","severity":1,"message":"676","line":220,"column":37,"nodeType":"674","messageId":"675","endLine":220,"endColumn":39},{"ruleId":"681","severity":1,"message":"682","line":557,"column":7,"nodeType":"683","messageId":"684","endLine":557,"endColumn":15},{"ruleId":"672","severity":1,"message":"676","line":756,"column":34,"nodeType":"674","messageId":"675","endLine":756,"endColumn":36},{"ruleId":"672","severity":1,"message":"676","line":756,"column":49,"nodeType":"674","messageId":"675","endLine":756,"endColumn":51},{"ruleId":"672","severity":1,"message":"676","line":955,"column":21,"nodeType":"674","messageId":"675","endLine":955,"endColumn":23},{"ruleId":"672","severity":1,"message":"676","line":955,"column":34,"nodeType":"674","messageId":"675","endLine":955,"endColumn":36},{"ruleId":"681","severity":1,"message":"682","line":994,"column":11,"nodeType":"683","messageId":"684","endLine":996,"endColumn":19},{"ruleId":"681","severity":1,"message":"682","line":1061,"column":7,"nodeType":"683","messageId":"684","endLine":1063,"endColumn":30},{"ruleId":"681","severity":1,"message":"682","line":1065,"column":7,"nodeType":"683","messageId":"684","endLine":1065,"endColumn":17},{"ruleId":"681","severity":1,"message":"689","line":1077,"column":7,"nodeType":"683","messageId":"690","endLine":1103,"endColumn":40},{"ruleId":"672","severity":1,"message":"676","line":1200,"column":36,"nodeType":"674","messageId":"675","endLine":1200,"endColumn":38},{"ruleId":"672","severity":1,"message":"676","line":1200,"column":63,"nodeType":"674","messageId":"675","endLine":1200,"endColumn":65},{"ruleId":"691","severity":1,"message":"692","line":1229,"column":16,"nodeType":"693","messageId":"694","endLine":1229,"endColumn":43},{"ruleId":"668","severity":1,"message":"669","line":95,"column":7,"nodeType":"670","messageId":"671","endLine":115,"endColumn":8},{"ruleId":"672","severity":1,"message":"673","line":116,"column":109,"nodeType":"674","messageId":"675","endLine":116,"endColumn":111},{"ruleId":"672","severity":1,"message":"673","line":116,"column":144,"nodeType":"674","messageId":"675","endLine":116,"endColumn":146},{"ruleId":"672","severity":1,"message":"676","line":116,"column":144,"nodeType":"674","messageId":"675","endLine":116,"endColumn":146},{"ruleId":"672","severity":1,"message":"676","line":116,"column":205,"nodeType":"674","messageId":"675","endLine":116,"endColumn":207},"no-native-reassign",["699"],"no-negated-in-lhs",["700"],["699"],["700"],"no-unused-vars","'code1' is assigned a value but never used.","Identifier","unusedVar","'code2' is assigned a value but never used.","'code3' is assigned a value but never used.","'code4' is assigned a value but never used.","'code5' is assigned a value but never used.","'code6' is assigned a value but never used.","'code7' is assigned a value but never used.","'code8' is assigned a value but never used.","'code9' is assigned a value but never used.","'code10' is assigned a value but never used.","'babelParser' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"701","text":"702"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","Expected a 'break' statement before 'default'.","default","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'parse' is defined but never used.","'parseExpression' is defined but never used.","'PARAM_AWAIT' is defined but never used.","'ExpressionScope' is defined but never used.","no-global-assign","no-unsafe-negation",[0,13],""]